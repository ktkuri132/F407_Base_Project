ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_rng.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.RNG_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	RNG_DeInit
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	RNG_DeInit:
  27              	.LFB123:
  28              		.file 1 "STM32F4xx_LIB/periph/src/stm32f4xx_rng.c"
   1:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /**
   2:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   ******************************************************************************
   3:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @file    stm32f4xx_rng.c
   4:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @author  MCD Application Team
   5:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @version V1.8.1
   6:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @date    27-January-2022
   7:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @brief This file provides firmware functions to manage the following 
   8:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *          functionalities of the Random Number Generator (RNG) peripheral:           
   9:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *           + Initialization and Configuration 
  10:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *           + Get 32 bit Random number      
  11:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *           + Interrupts and flags management       
  12:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         
  13:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** @verbatim
  14:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****                                  
  15:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  ===================================================================      
  16:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****                  ##### How to use this driver #####
  17:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  ===================================================================          
  18:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  [..]
  19:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****    (#) Enable The RNG controller clock using 
  20:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, ENABLE) function.
  21:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****                 
  22:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****    (#) Activate the RNG peripheral using RNG_Cmd() function.
  23:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****             
  24:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****    (#) Wait until the 32 bit Random number Generator contains a valid  random data
  25:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****       (using polling/interrupt mode). For more details, refer to "Interrupts and 
  26:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****       flags management functions" module description.
  27:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****              
  28:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****    (#) Get the 32 bit Random number using RNG_GetRandomNumber() function
  29:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****             
  30:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****    (#) To get another 32 bit Random number, go to step 3.       
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s 			page 2


  31:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****          
  32:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****                 
  33:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** @endverbatim
  34:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         
  35:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   ******************************************************************************
  36:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @attention
  37:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *
  38:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * Copyright (c) 2016 STMicroelectronics.
  39:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * All rights reserved.
  40:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *
  41:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * This software is licensed under terms that can be found in the LICENSE file
  42:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * in the root directory of this software component.
  43:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  44:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *
  45:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   ******************************************************************************
  46:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   */
  47:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
  48:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /* Includes ------------------------------------------------------------------*/
  49:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** #include "stm32f4xx_rng.h"
  50:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** #include "stm32f4xx_rcc.h"
  51:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
  52:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  53:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @{
  54:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   */
  55:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
  56:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /** @defgroup RNG 
  57:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @brief RNG driver modules
  58:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @{
  59:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   */ 
  60:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F410xx) || defined(STM32F41
  61:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /* Private typedef -----------------------------------------------------------*/
  62:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /* Private define ------------------------------------------------------------*/
  63:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /* Private macro -------------------------------------------------------------*/
  64:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /* Private variables ---------------------------------------------------------*/
  65:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /* Private function prototypes -----------------------------------------------*/
  66:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /* Private functions ---------------------------------------------------------*/
  67:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
  68:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /** @defgroup RNG_Private_Functions
  69:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @{
  70:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   */ 
  71:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
  72:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group1 Initialization and Configuration functions
  73:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  *  @brief    Initialization and Configuration functions 
  74:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  *
  75:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** @verbatim    
  76:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  ===============================================================================
  77:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****              ##### Initialization and Configuration functions #####
  78:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  ===============================================================================  
  79:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  [..] This section provides functions allowing to 
  80:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****    (+) Initialize the RNG peripheral
  81:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****    (+) Enable or disable the RNG peripheral
  82:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****    
  83:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** @endverbatim
  84:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @{
  85:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   */
  86:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
  87:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /**
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s 			page 3


  88:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @brief  De-initializes the RNG peripheral registers to their default reset values.
  89:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @param  None
  90:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @retval None
  91:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   */
  92:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** void RNG_DeInit(void)
  93:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** {
  29              		.loc 1 93 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
  94:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
  95:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   /* Enable RNG reset state */
  96:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
  38              		.loc 1 96 3 view .LVU1
  39 0002 0121     		movs	r1, #1
  40 0004 4020     		movs	r0, #64
  41 0006 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
  42              	.LVL0:
  97:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
  98:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   /* Release RNG from reset state */
  99:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
  43              		.loc 1 99 3 view .LVU2
  44 000a 0021     		movs	r1, #0
  45 000c 4020     		movs	r0, #64
  46 000e FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
  47              	.LVL1:
 100:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F469_479xx */
 101:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** #if defined(STM32F410xx)
 102:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****    /* Enable RNG reset state */
 103:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_RNG, ENABLE);
 104:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 105:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   /* Release RNG from reset state */
 106:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_RNG, DISABLE); 
 107:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** #endif /* STM32F410xx*/  
 108:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** }
  48              		.loc 1 108 1 is_stmt 0 view .LVU3
  49 0012 08BD     		pop	{r3, pc}
  50              		.cfi_endproc
  51              	.LFE123:
  53              		.section	.text.RNG_Cmd,"ax",%progbits
  54              		.align	1
  55              		.global	RNG_Cmd
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  59              		.fpu fpv4-sp-d16
  61              	RNG_Cmd:
  62              	.LVL2:
  63              	.LFB124:
 109:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 110:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /**
 111:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG peripheral.
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s 			page 4


 112:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG peripheral.
 113:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 114:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @retval None
 115:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   */
 116:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** void RNG_Cmd(FunctionalState NewState)
 117:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** {
  64              		.loc 1 117 1 is_stmt 1 view -0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              		@ link register save eliminated.
 118:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   /* Check the parameters */
 119:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
  69              		.loc 1 119 3 view .LVU5
 120:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 121:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
  70              		.loc 1 121 3 view .LVU6
  71              		.loc 1 121 6 is_stmt 0 view .LVU7
  72 0000 28B1     		cbz	r0, .L4
 122:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   {
 123:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****     /* Enable the RNG */
 124:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_RNGEN;
  73              		.loc 1 124 5 is_stmt 1 view .LVU8
  74              		.loc 1 124 13 is_stmt 0 view .LVU9
  75 0002 064A     		ldr	r2, .L6
  76 0004 1368     		ldr	r3, [r2]
  77 0006 43F00403 		orr	r3, r3, #4
  78 000a 1360     		str	r3, [r2]
  79 000c 7047     		bx	lr
  80              	.L4:
 125:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   }
 126:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   else
 127:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   {
 128:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****     /* Disable the RNG */
 129:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_RNGEN;
  81              		.loc 1 129 5 is_stmt 1 view .LVU10
  82              		.loc 1 129 13 is_stmt 0 view .LVU11
  83 000e 034A     		ldr	r2, .L6
  84 0010 1368     		ldr	r3, [r2]
  85 0012 23F00403 		bic	r3, r3, #4
  86 0016 1360     		str	r3, [r2]
 130:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   }
 131:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** }
  87              		.loc 1 131 1 view .LVU12
  88 0018 7047     		bx	lr
  89              	.L7:
  90 001a 00BF     		.align	2
  91              	.L6:
  92 001c 00080650 		.word	1342572544
  93              		.cfi_endproc
  94              	.LFE124:
  96              		.section	.text.RNG_GetRandomNumber,"ax",%progbits
  97              		.align	1
  98              		.global	RNG_GetRandomNumber
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s 			page 5


 102              		.fpu fpv4-sp-d16
 104              	RNG_GetRandomNumber:
 105              	.LFB125:
 132:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /**
 133:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @}
 134:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   */
 135:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 136:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group2 Get 32 bit Random number function
 137:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  *  @brief    Get 32 bit Random number function 
 138:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  *
 139:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 140:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** @verbatim    
 141:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  ===============================================================================
 142:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****                  ##### Get 32 bit Random number function #####
 143:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  ===============================================================================  
 144:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  [..] This section provides a function allowing to get the 32 bit Random number  
 145:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   
 146:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****    (@)  Before to call this function you have to wait till DRDY flag is set,
 147:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****         using RNG_GetFlagStatus(RNG_FLAG_DRDY) function. 
 148:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****    
 149:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** @endverbatim
 150:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @{
 151:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   */
 152:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 153:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 154:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /**
 155:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @brief  Returns a 32-bit random number.
 156:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *   
 157:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @note   Before to call this function you have to wait till DRDY (data ready)
 158:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         flag is set, using RNG_GetFlagStatus(RNG_FLAG_DRDY) function.
 159:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @note   Each time the Random number data is read (using RNG_GetRandomNumber()
 160:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         function), the RNG_FLAG_DRDY flag is automatically cleared.
 161:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @note   In the case of a seed error, the generation of random numbers is 
 162:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         interrupted for as long as the SECS bit is '1'. If a number is 
 163:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         available in the RNG_DR register, it must not be used because it may 
 164:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         not have enough entropy. In this case, it is recommended to clear the 
 165:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         SEIS bit(using RNG_ClearFlag(RNG_FLAG_SECS) function), then disable 
 166:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         and enable the RNG peripheral (using RNG_Cmd() function) to 
 167:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         reinitialize and restart the RNG.
 168:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @note   In the case of a clock error, the RNG is no more able to generate 
 169:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         random numbers because the PLL48CLK clock is not correct. User have 
 170:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         to check that the clock controller is correctly configured to provide
 171:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         the RNG clock and clear the CEIS bit (using RNG_ClearFlag(RNG_FLAG_CECS) 
 172:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         function) . The clock error has no impact on the previously generated 
 173:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         random numbers, and the RNG_DR register contents can be used.
 174:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         
 175:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @param  None
 176:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @retval 32-bit random number.
 177:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   */
 178:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** uint32_t RNG_GetRandomNumber(void)
 179:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** {
 106              		.loc 1 179 1 is_stmt 1 view -0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              		@ link register save eliminated.
 180:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   /* Return the 32 bit random number from the DR register */
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s 			page 6


 181:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   return RNG->DR;
 111              		.loc 1 181 3 view .LVU14
 112              		.loc 1 181 13 is_stmt 0 view .LVU15
 113 0000 014B     		ldr	r3, .L9
 114 0002 9868     		ldr	r0, [r3, #8]
 182:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** }
 115              		.loc 1 182 1 view .LVU16
 116 0004 7047     		bx	lr
 117              	.L10:
 118 0006 00BF     		.align	2
 119              	.L9:
 120 0008 00080650 		.word	1342572544
 121              		.cfi_endproc
 122              	.LFE125:
 124              		.section	.text.RNG_ITConfig,"ax",%progbits
 125              		.align	1
 126              		.global	RNG_ITConfig
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 130              		.fpu fpv4-sp-d16
 132              	RNG_ITConfig:
 133              	.LVL3:
 134              	.LFB126:
 183:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 184:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 185:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /**
 186:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @}
 187:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   */
 188:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 189:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group3 Interrupts and flags management functions
 190:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  *  @brief   Interrupts and flags management functions
 191:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  *
 192:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** @verbatim   
 193:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  ===============================================================================
 194:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****              ##### Interrupts and flags management functions #####
 195:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  ===============================================================================  
 196:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 197:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  [..] This section provides functions allowing to configure the RNG Interrupts and 
 198:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****       to get the status and clear flags and Interrupts pending bits.
 199:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   
 200:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  [..] The RNG provides 3 Interrupts sources and 3 Flags:
 201:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   
 202:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  *** Flags : ***
 203:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  ===============
 204:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  [..] 
 205:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****     (#) RNG_FLAG_DRDY :  In the case of the RNG_DR register contains valid 
 206:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****         random data. it is cleared by reading the valid data(using 
 207:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****         RNG_GetRandomNumber() function).
 208:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 209:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****     (#) RNG_FLAG_CECS : In the case of a seed error detection. 
 210:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****       
 211:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****     (#) RNG_FLAG_SECS : In the case of a clock error detection.
 212:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****               
 213:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  *** Interrupts ***
 214:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  ==================
 215:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  [..] If enabled, an RNG interrupt is pending :
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s 			page 7


 216:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****     
 217:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****    (#) In the case of the RNG_DR register contains valid random data. 
 218:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****        This interrupt source is cleared once the RNG_DR register has been read 
 219:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****        (using RNG_GetRandomNumber() function) until a new valid value is 
 220:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****        computed; or 
 221:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****    (#) In the case of a seed error : One of the following faulty sequences has 
 222:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****        been detected:
 223:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****        (++) More than 64 consecutive bits at the same value (0 or 1)
 224:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****        (++) More than 32 consecutive alternance of 0 and 1 (0101010101...01)
 225:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****        This interrupt source is cleared using RNG_ClearITPendingBit(RNG_IT_SEI)
 226:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****        function; or
 227:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****    (#) In the case of a clock error : the PLL48CLK (RNG peripheral clock source) 
 228:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****        was not correctly detected (fPLL48CLK< fHCLK/16). This interrupt source is
 229:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****        cleared using RNG_ClearITPendingBit(RNG_IT_CEI) function.
 230:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****        -@- note In this case, User have to check that the clock controller is 
 231:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****            correctly configured to provide the RNG clock. 
 232:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 233:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  *** Managing the RNG controller events : ***
 234:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  ============================================
 235:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****  [..] The user should identify which mode will be used in his application to manage 
 236:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****       the RNG controller events: Polling mode or Interrupt mode.
 237:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   
 238:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****    (#) In the Polling Mode it is advised to use the following functions:
 239:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****        (++) RNG_GetFlagStatus() : to check if flags events occur. 
 240:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****        (++) RNG_ClearFlag()     : to clear the flags events.
 241:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   
 242:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****        -@@- RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag(). it is cleared only 
 243:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****             by reading the Random number data.      
 244:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   
 245:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****    (#)  In the Interrupt Mode it is advised to use the following functions:
 246:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****         (++) RNG_ITConfig()       : to enable or disable the interrupt source.
 247:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****         (++) RNG_GetITStatus()    : to check if Interrupt occurs.
 248:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****         (++) RNG_ClearITPendingBit() : to clear the Interrupt pending Bit 
 249:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****              (corresponding Flag). 
 250:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   
 251:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** @endverbatim
 252:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @{
 253:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   */ 
 254:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 255:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /**
 256:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG interrupt.
 257:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @note   The RNG provides 3 interrupt sources,
 258:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *           - Computed data is ready event (DRDY), and           
 259:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *           - Seed error Interrupt (SEI) and 
 260:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *           - Clock error Interrupt (CEI), 
 261:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         all these interrupts sources are enabled by setting the IE bit in 
 262:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         CR register. However, each interrupt have its specific status bit
 263:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         (see RNG_GetITStatus() function) and clear bit except the DRDY event
 264:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         (see RNG_ClearITPendingBit() function).
 265:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG interrupt.
 266:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 267:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @retval None
 268:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   */
 269:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** void RNG_ITConfig(FunctionalState NewState)
 270:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** {
 135              		.loc 1 270 1 is_stmt 1 view -0
 136              		.cfi_startproc
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s 			page 8


 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 0, uses_anonymous_args = 0
 139              		@ link register save eliminated.
 271:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   /* Check the parameters */
 272:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 140              		.loc 1 272 3 view .LVU18
 273:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 274:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
 141              		.loc 1 274 3 view .LVU19
 142              		.loc 1 274 6 is_stmt 0 view .LVU20
 143 0000 28B1     		cbz	r0, .L12
 275:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   {
 276:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****     /* Enable the RNG interrupt */
 277:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_IE;
 144              		.loc 1 277 5 is_stmt 1 view .LVU21
 145              		.loc 1 277 13 is_stmt 0 view .LVU22
 146 0002 064A     		ldr	r2, .L14
 147 0004 1368     		ldr	r3, [r2]
 148 0006 43F00803 		orr	r3, r3, #8
 149 000a 1360     		str	r3, [r2]
 150 000c 7047     		bx	lr
 151              	.L12:
 278:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   }
 279:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   else
 280:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   {
 281:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****     /* Disable the RNG interrupt */
 282:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_IE;
 152              		.loc 1 282 5 is_stmt 1 view .LVU23
 153              		.loc 1 282 13 is_stmt 0 view .LVU24
 154 000e 034A     		ldr	r2, .L14
 155 0010 1368     		ldr	r3, [r2]
 156 0012 23F00803 		bic	r3, r3, #8
 157 0016 1360     		str	r3, [r2]
 283:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   }
 284:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** }
 158              		.loc 1 284 1 view .LVU25
 159 0018 7047     		bx	lr
 160              	.L15:
 161 001a 00BF     		.align	2
 162              	.L14:
 163 001c 00080650 		.word	1342572544
 164              		.cfi_endproc
 165              	.LFE126:
 167              		.section	.text.RNG_GetFlagStatus,"ax",%progbits
 168              		.align	1
 169              		.global	RNG_GetFlagStatus
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 173              		.fpu fpv4-sp-d16
 175              	RNG_GetFlagStatus:
 176              	.LVL4:
 177              	.LFB127:
 285:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 286:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /**
 287:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG flag is set or not.
 288:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the RNG flag to check.
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s 			page 9


 289:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 290:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_DRDY: Data Ready flag.
 291:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 292:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
 293:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_FLAG (SET or RESET).
 294:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   */
 295:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
 296:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** {
 178              		.loc 1 296 1 is_stmt 1 view -0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              		@ link register save eliminated.
 297:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   FlagStatus bitstatus = RESET;
 183              		.loc 1 297 3 view .LVU27
 298:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   /* Check the parameters */
 299:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_FLAG(RNG_FLAG));
 184              		.loc 1 299 3 view .LVU28
 300:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 301:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG flag */
 302:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 185              		.loc 1 302 3 view .LVU29
 186              		.loc 1 302 11 is_stmt 0 view .LVU30
 187 0000 034B     		ldr	r3, .L19
 188 0002 5B68     		ldr	r3, [r3, #4]
 189              		.loc 1 302 6 view .LVU31
 190 0004 1842     		tst	r0, r3
 191 0006 01D0     		beq	.L18
 303:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   {
 304:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****     /* RNG_FLAG is set */
 305:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****     bitstatus = SET;
 192              		.loc 1 305 15 view .LVU32
 193 0008 0120     		movs	r0, #1
 194              	.LVL5:
 195              		.loc 1 305 15 view .LVU33
 196 000a 7047     		bx	lr
 197              	.LVL6:
 198              	.L18:
 306:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   }
 307:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   else
 308:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   {
 309:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****     /* RNG_FLAG is reset */
 310:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****     bitstatus = RESET;
 199              		.loc 1 310 15 view .LVU34
 200 000c 0020     		movs	r0, #0
 201              	.LVL7:
 311:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   }
 312:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   /* Return the RNG_FLAG status */
 313:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   return  bitstatus;
 202              		.loc 1 313 3 is_stmt 1 view .LVU35
 314:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** }
 203              		.loc 1 314 1 is_stmt 0 view .LVU36
 204 000e 7047     		bx	lr
 205              	.L20:
 206              		.align	2
 207              	.L19:
 208 0010 00080650 		.word	1342572544
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s 			page 10


 209              		.cfi_endproc
 210              	.LFE127:
 212              		.section	.text.RNG_ClearFlag,"ax",%progbits
 213              		.align	1
 214              		.global	RNG_ClearFlag
 215              		.syntax unified
 216              		.thumb
 217              		.thumb_func
 218              		.fpu fpv4-sp-d16
 220              	RNG_ClearFlag:
 221              	.LVL8:
 222              	.LFB128:
 315:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 316:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 317:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /**
 318:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG flags.
 319:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the flag to clear. 
 320:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 321:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 322:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
 323:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @note   RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag() function. 
 324:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         This flag is cleared only by reading the Random number data (using 
 325:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *         RNG_GetRandomNumber() function).                           
 326:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @retval None
 327:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   */
 328:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** void RNG_ClearFlag(uint8_t RNG_FLAG)
 329:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** {
 223              		.loc 1 329 1 is_stmt 1 view -0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 330:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   /* Check the parameters */
 331:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
 228              		.loc 1 331 3 view .LVU38
 332:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   /* Clear the selected RNG flags */
 333:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 229              		.loc 1 333 3 view .LVU39
 230              		.loc 1 333 13 is_stmt 0 view .LVU40
 231 0000 6FEA0010 		mvn	r0, r0, lsl #4
 232              	.LVL9:
 233              		.loc 1 333 11 view .LVU41
 234 0004 014B     		ldr	r3, .L22
 235 0006 5860     		str	r0, [r3, #4]
 334:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** }
 236              		.loc 1 334 1 view .LVU42
 237 0008 7047     		bx	lr
 238              	.L23:
 239 000a 00BF     		.align	2
 240              	.L22:
 241 000c 00080650 		.word	1342572544
 242              		.cfi_endproc
 243              	.LFE128:
 245              		.section	.text.RNG_GetITStatus,"ax",%progbits
 246              		.align	1
 247              		.global	RNG_GetITStatus
 248              		.syntax unified
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s 			page 11


 249              		.thumb
 250              		.thumb_func
 251              		.fpu fpv4-sp-d16
 253              	RNG_GetITStatus:
 254              	.LVL10:
 255              	.LFB129:
 335:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 336:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /**
 337:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG interrupt has occurred or not.
 338:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt source to check.
 339:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 340:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 341:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
 342:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_IT (SET or RESET).
 343:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   */
 344:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** ITStatus RNG_GetITStatus(uint8_t RNG_IT)
 345:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** {
 256              		.loc 1 345 1 is_stmt 1 view -0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              		@ link register save eliminated.
 346:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   ITStatus bitstatus = RESET;
 261              		.loc 1 346 3 view .LVU44
 347:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   /* Check the parameters */
 348:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_IT(RNG_IT));
 262              		.loc 1 348 3 view .LVU45
 349:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 350:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG interrupt */
 351:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 263              		.loc 1 351 3 view .LVU46
 264              		.loc 1 351 11 is_stmt 0 view .LVU47
 265 0000 034B     		ldr	r3, .L27
 266 0002 5B68     		ldr	r3, [r3, #4]
 267              		.loc 1 351 6 view .LVU48
 268 0004 1842     		tst	r0, r3
 269 0006 01D0     		beq	.L26
 352:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   {
 353:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****     /* RNG_IT is set */
 354:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****     bitstatus = SET;
 270              		.loc 1 354 15 view .LVU49
 271 0008 0120     		movs	r0, #1
 272              	.LVL11:
 273              		.loc 1 354 15 view .LVU50
 274 000a 7047     		bx	lr
 275              	.LVL12:
 276              	.L26:
 355:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   }
 356:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   else
 357:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   {
 358:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****     /* RNG_IT is reset */
 359:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****     bitstatus = RESET;
 277              		.loc 1 359 15 view .LVU51
 278 000c 0020     		movs	r0, #0
 279              	.LVL13:
 360:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   }
 361:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   /* Return the RNG_IT status */
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s 			page 12


 362:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   return bitstatus;
 280              		.loc 1 362 3 is_stmt 1 view .LVU52
 363:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** }
 281              		.loc 1 363 1 is_stmt 0 view .LVU53
 282 000e 7047     		bx	lr
 283              	.L28:
 284              		.align	2
 285              	.L27:
 286 0010 00080650 		.word	1342572544
 287              		.cfi_endproc
 288              	.LFE129:
 290              		.section	.text.RNG_ClearITPendingBit,"ax",%progbits
 291              		.align	1
 292              		.global	RNG_ClearITPendingBit
 293              		.syntax unified
 294              		.thumb
 295              		.thumb_func
 296              		.fpu fpv4-sp-d16
 298              	RNG_ClearITPendingBit:
 299              	.LVL14:
 300              	.LFB130:
 364:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 365:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 366:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** /**
 367:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG interrupt pending bit(s).
 368:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt pending bit(s) to clear.
 369:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 370:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 371:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.
 372:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   * @retval None
 373:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   */
 374:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** void RNG_ClearITPendingBit(uint8_t RNG_IT)
 375:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** {
 301              		.loc 1 375 1 is_stmt 1 view -0
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 0
 304              		@ frame_needed = 0, uses_anonymous_args = 0
 305              		@ link register save eliminated.
 376:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   /* Check the parameters */
 377:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_IT(RNG_IT));
 306              		.loc 1 377 3 view .LVU55
 378:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** 
 379:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   /* Clear the selected RNG interrupt pending bit */
 380:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c ****   RNG->SR = (uint8_t)~RNG_IT;
 307              		.loc 1 380 3 view .LVU56
 308              		.loc 1 380 13 is_stmt 0 view .LVU57
 309 0000 C043     		mvns	r0, r0
 310              	.LVL15:
 311              		.loc 1 380 13 view .LVU58
 312 0002 C0B2     		uxtb	r0, r0
 313              		.loc 1 380 11 view .LVU59
 314 0004 014B     		ldr	r3, .L30
 315 0006 5860     		str	r0, [r3, #4]
 381:STM32F4xx_LIB/periph/src/stm32f4xx_rng.c **** }
 316              		.loc 1 381 1 view .LVU60
 317 0008 7047     		bx	lr
 318              	.L31:
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s 			page 13


 319 000a 00BF     		.align	2
 320              	.L30:
 321 000c 00080650 		.word	1342572544
 322              		.cfi_endproc
 323              	.LFE130:
 325              		.text
 326              	.Letext0:
 327              		.file 2 "d:\\gcc_tool\\gnu_tool_arm_embedded\\arm-none-eabi\\include\\machine\\_default_types.h"
 328              		.file 3 "d:\\gcc_tool\\gnu_tool_arm_embedded\\arm-none-eabi\\include\\sys\\_stdint.h"
 329              		.file 4 "STM32F4xx_LIB/core/core_cm4.h"
 330              		.file 5 "User/system_stm32f4xx.h"
 331              		.file 6 "User/stm32f4xx.h"
 332              		.file 7 "STM32F4xx_LIB/periph/inc/stm32f4xx_rcc.h"
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s 			page 14


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rng.c
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:18     .text.RNG_DeInit:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:26     .text.RNG_DeInit:00000000 RNG_DeInit
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:54     .text.RNG_Cmd:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:61     .text.RNG_Cmd:00000000 RNG_Cmd
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:92     .text.RNG_Cmd:0000001c $d
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:97     .text.RNG_GetRandomNumber:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:104    .text.RNG_GetRandomNumber:00000000 RNG_GetRandomNumber
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:120    .text.RNG_GetRandomNumber:00000008 $d
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:125    .text.RNG_ITConfig:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:132    .text.RNG_ITConfig:00000000 RNG_ITConfig
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:163    .text.RNG_ITConfig:0000001c $d
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:168    .text.RNG_GetFlagStatus:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:175    .text.RNG_GetFlagStatus:00000000 RNG_GetFlagStatus
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:208    .text.RNG_GetFlagStatus:00000010 $d
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:213    .text.RNG_ClearFlag:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:220    .text.RNG_ClearFlag:00000000 RNG_ClearFlag
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:241    .text.RNG_ClearFlag:0000000c $d
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:246    .text.RNG_GetITStatus:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:253    .text.RNG_GetITStatus:00000000 RNG_GetITStatus
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:286    .text.RNG_GetITStatus:00000010 $d
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:291    .text.RNG_ClearITPendingBit:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:298    .text.RNG_ClearITPendingBit:00000000 RNG_ClearITPendingBit
C:\Users\æ©€Ú\AppData\Local\Temp\ccgHf6I9.s:321    .text.RNG_ClearITPendingBit:0000000c $d

UNDEFINED SYMBOLS
RCC_AHB2PeriphResetCmd
