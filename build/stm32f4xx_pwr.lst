ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_pwr.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.PWR_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	PWR_DeInit
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	PWR_DeInit:
  27              	.LFB123:
  28              		.file 1 "STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c"
   1:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
   2:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   ******************************************************************************
   3:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @file    stm32f4xx_pwr.c
   4:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @author  MCD Application Team
   5:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @version V1.8.1
   6:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @date    27-January-2022
   7:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief   This file provides firmware functions to manage the following 
   8:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:           
   9:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *           + Backup Domain Access
  10:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *           + PVD configuration
  11:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *           + WakeUp pin configuration
  12:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *           + Main and Backup Regulators configuration
  13:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *           + FLASH Power Down configuration
  14:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *           + Low Power modes configuration
  15:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *           + Flags management
  16:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *               
  17:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   ******************************************************************************
  18:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @attention
  19:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *
  20:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * Copyright (c) 2016 STMicroelectronics.
  21:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * All rights reserved.
  22:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *
  23:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * This software is licensed under terms that can be found in the LICENSE file
  24:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * in the root directory of this software component.
  25:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  26:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *
  27:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   ******************************************************************************
  28:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
  29:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
  30:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* Includes ------------------------------------------------------------------*/
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 2


  31:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #include "stm32f4xx_pwr.h"
  32:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #include "stm32f4xx_rcc.h"
  33:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
  34:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  35:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @{
  36:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
  37:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
  38:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /** @defgroup PWR 
  39:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief PWR driver modules
  40:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @{
  41:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */ 
  42:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
  43:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  44:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* Private define ------------------------------------------------------------*/
  45:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* --------- PWR registers bit address in the alias region ---------- */
  46:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
  47:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
  48:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* --- CR Register ---*/
  49:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
  50:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* Alias word address of DBP bit */
  51:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define CR_OFFSET                (PWR_OFFSET + 0x00)
  52:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define DBP_BitNumber            0x08
  53:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
  54:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
  55:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* Alias word address of PVDE bit */
  56:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define PVDE_BitNumber           0x04
  57:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
  58:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
  59:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* Alias word address of FPDS bit */
  60:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define FPDS_BitNumber           0x09
  61:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define CR_FPDS_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (FPDS_BitNumber * 4))
  62:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
  63:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* Alias word address of PMODE bit */
  64:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define PMODE_BitNumber           0x0E
  65:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define CR_PMODE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PMODE_BitNumber * 4))
  66:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
  67:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* Alias word address of ODEN bit */
  68:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define ODEN_BitNumber           0x10
  69:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define CR_ODEN_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (ODEN_BitNumber * 4))
  70:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
  71:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* Alias word address of ODSWEN bit */
  72:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define ODSWEN_BitNumber         0x11
  73:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define CR_ODSWEN_BB             (PERIPH_BB_BASE + (CR_OFFSET * 32) + (ODSWEN_BitNumber * 4))
  74:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
  75:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx)
  76:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* Alias word address of MRUDS bit */
  77:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define MRUDS_BitNumber         0x0B
  78:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define CR_MRUDS_BB             (PERIPH_BB_BASE + (CR_OFFSET * 32) + (MRUDS_BitNumber * 4))
  79:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
  80:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* Alias word address of LPUDS bit */
  81:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define LPUDS_BitNumber         0x0A
  82:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define CR_LPUDS_BB             (PERIPH_BB_BASE + (CR_OFFSET * 32) + (LPUDS_BitNumber * 4))
  83:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #endif /* STM32F427_437xx || STM32F429_439xx || STM32F446xx */
  84:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
  85:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #if defined(STM32F401xx) || defined(STM32F410xx) || defined(STM32F411xE) || defined(STM32F412xG) ||
  86:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* Alias word address of MRLVDS bit */
  87:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define MRLVDS_BitNumber         0x0B
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 3


  88:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define CR_MRLVDS_BB             (PERIPH_BB_BASE + (CR_OFFSET * 32) + (MRLVDS_BitNumber * 4))
  89:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
  90:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* Alias word address of LPLVDS bit */
  91:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define LPLVDS_BitNumber         0x0A
  92:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define CR_LPLVDS_BB             (PERIPH_BB_BASE + (CR_OFFSET * 32) + (LPLVDS_BitNumber * 4))
  93:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #endif /* STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F413_423xx */
  94:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
  95:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* --- CSR Register ---*/
  96:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
  97:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* Alias word address of EWUP bit */
  98:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
  99:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define EWUP_BitNumber           0x08
 100:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
 101:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F410xx || STM
 102:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 103:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx
 104:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* Alias word address of EWUP2 bit */
 105:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
 106:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define EWUP1_BitNumber           0x08
 107:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define CSR_EWUP1_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP1_BitNumber * 4))
 108:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define EWUP2_BitNumber           0x07
 109:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define CSR_EWUP2_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP2_BitNumber * 4))
 110:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx)
 111:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define EWUP3_BitNumber           0x06
 112:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define CSR_EWUP3_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP2_BitNumber * 4))
 113:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx */
 114:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx || STM32F446xx */
 115:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 116:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* Alias word address of BRE bit */
 117:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define BRE_BitNumber            0x09
 118:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define CSR_BRE_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (BRE_BitNumber * 4))
 119:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 120:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* ------------------ PWR registers bit mask ------------------------ */
 121:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 122:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* CR register bit mask */
 123:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define CR_DS_MASK               ((uint32_t)0xFFFFF3FC)
 124:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
 125:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #define CR_VOS_MASK              ((uint32_t)0xFFFF3FFF)
 126:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 127:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* Private macro -------------------------------------------------------------*/
 128:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* Private variables ---------------------------------------------------------*/
 129:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* Private function prototypes -----------------------------------------------*/
 130:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /* Private functions ---------------------------------------------------------*/
 131:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 132:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Private_Functions
 133:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @{
 134:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 135:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 136:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group1 Backup Domain Access function 
 137:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *  @brief   Backup Domain Access function  
 138:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *
 139:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** @verbatim   
 140:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****  ===============================================================================
 141:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****                   ##### Backup Domain Access function #####
 142:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****  ===============================================================================  
 143:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     [..]
 144:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       After reset, the backup domain (RTC registers, RTC backup data 
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 4


 145:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       registers and backup SRAM) is protected against possible unwanted 
 146:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       write accesses. 
 147:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       To enable access to the RTC Domain and RTC registers, proceed as follows:
 148:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         (+) Enable the Power Controller (PWR) APB1 interface clock using the
 149:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****             RCC_APB1PeriphClockCmd() function.
 150:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         (+) Enable access to RTC domain using the PWR_BackupAccessCmd() function.
 151:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 152:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** @endverbatim
 153:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @{
 154:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 155:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 156:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 157:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
 158:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  None
 159:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @retval None
 160:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 161:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** void PWR_DeInit(void)
 162:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** {
  29              		.loc 1 162 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
 163:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  38              		.loc 1 163 3 view .LVU1
  39 0002 0121     		movs	r1, #1
  40 0004 4FF08050 		mov	r0, #268435456
  41 0008 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  42              	.LVL0:
 164:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
  43              		.loc 1 164 3 view .LVU2
  44 000c 0021     		movs	r1, #0
  45 000e 4FF08050 		mov	r0, #268435456
  46 0012 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  47              	.LVL1:
 165:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** }
  48              		.loc 1 165 1 is_stmt 0 view .LVU3
  49 0016 08BD     		pop	{r3, pc}
  50              		.cfi_endproc
  51              	.LFE123:
  53              		.section	.text.PWR_BackupAccessCmd,"ax",%progbits
  54              		.align	1
  55              		.global	PWR_BackupAccessCmd
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  59              		.fpu fpv4-sp-d16
  61              	PWR_BackupAccessCmd:
  62              	.LVL2:
  63              	.LFB124:
 166:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 167:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 168:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables access to the backup domain (RTC registers, RTC 
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 5


 169:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         backup data registers and backup SRAM).
 170:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 171:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         Backup Domain Access should be kept enabled.
 172:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the access to the backup domain.
 173:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 174:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @retval None
 175:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 176:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** void PWR_BackupAccessCmd(FunctionalState NewState)
 177:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** {
  64              		.loc 1 177 1 is_stmt 1 view -0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              		@ link register save eliminated.
 178:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 179:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
  69              		.loc 1 179 3 view .LVU5
 180:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 181:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
  70              		.loc 1 181 3 view .LVU6
  71              		.loc 1 181 32 is_stmt 0 view .LVU7
  72 0000 014B     		ldr	r3, .L4
  73 0002 1860     		str	r0, [r3]
 182:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** }
  74              		.loc 1 182 1 view .LVU8
  75 0004 7047     		bx	lr
  76              	.L5:
  77 0006 00BF     		.align	2
  78              	.L4:
  79 0008 20000E42 		.word	1108213792
  80              		.cfi_endproc
  81              	.LFE124:
  83              		.section	.text.PWR_PVDLevelConfig,"ax",%progbits
  84              		.align	1
  85              		.global	PWR_PVDLevelConfig
  86              		.syntax unified
  87              		.thumb
  88              		.thumb_func
  89              		.fpu fpv4-sp-d16
  91              	PWR_PVDLevelConfig:
  92              	.LVL3:
  93              	.LFB125:
 183:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 184:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 185:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @}
 186:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 187:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 188:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group2 PVD configuration functions
 189:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *  @brief   PVD configuration functions 
 190:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *
 191:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** @verbatim   
 192:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****  ===============================================================================
 193:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****                     ##### PVD configuration functions #####
 194:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****  ===============================================================================  
 195:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     [..]
 196:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (+) The PVD is used to monitor the VDD power supply by comparing it to a 
 197:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           threshold selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 6


 198:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (+) A PVDO flag is available to indicate if VDD/VDDA is higher or lower 
 199:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           than the PVD threshold. This event is internally connected to the EXTI 
 200:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           line16 and can generate an interrupt if enabled through the EXTI registers.
 201:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (+) The PVD is stopped in Standby mode.
 202:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 203:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** @endverbatim
 204:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @{
 205:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 206:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 207:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 208:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 209:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  PWR_PVDLevel: specifies the PVD detection level
 210:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 211:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_0
 212:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_1
 213:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_2
 214:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_3
 215:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_4
 216:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_5
 217:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_6
 218:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_7
 219:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note   Refer to the electrical characteristics of your device datasheet for
 220:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         more details about the voltage threshold corresponding to each 
 221:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         detection level.
 222:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @retval None
 223:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 224:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
 225:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** {
  94              		.loc 1 225 1 is_stmt 1 view -0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              		@ link register save eliminated.
 226:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
  99              		.loc 1 226 3 view .LVU10
 227:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 228:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 229:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
 100              		.loc 1 229 3 view .LVU11
 230:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 231:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 101              		.loc 1 231 3 view .LVU12
 102              		.loc 1 231 10 is_stmt 0 view .LVU13
 103 0000 034A     		ldr	r2, .L7
 104 0002 1368     		ldr	r3, [r2]
 105              	.LVL4:
 232:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 233:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Clear PLS[7:5] bits */
 234:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   tmpreg &= CR_PLS_MASK;
 106              		.loc 1 234 3 is_stmt 1 view .LVU14
 107              		.loc 1 234 10 is_stmt 0 view .LVU15
 108 0004 23F0E003 		bic	r3, r3, #224
 109              	.LVL5:
 235:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 236:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Set PLS[7:5] bits according to PWR_PVDLevel value */
 237:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_PVDLevel;
 110              		.loc 1 237 3 is_stmt 1 view .LVU16
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 7


 111              		.loc 1 237 10 is_stmt 0 view .LVU17
 112 0008 0343     		orrs	r3, r3, r0
 113              	.LVL6:
 238:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 239:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Store the new value */
 240:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 114              		.loc 1 240 3 is_stmt 1 view .LVU18
 115              		.loc 1 240 11 is_stmt 0 view .LVU19
 116 000a 1360     		str	r3, [r2]
 241:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** }
 117              		.loc 1 241 1 view .LVU20
 118 000c 7047     		bx	lr
 119              	.L8:
 120 000e 00BF     		.align	2
 121              	.L7:
 122 0010 00700040 		.word	1073770496
 123              		.cfi_endproc
 124              	.LFE125:
 126              		.section	.text.PWR_PVDCmd,"ax",%progbits
 127              		.align	1
 128              		.global	PWR_PVDCmd
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 132              		.fpu fpv4-sp-d16
 134              	PWR_PVDCmd:
 135              	.LVL7:
 136              	.LFB126:
 242:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 243:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 244:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Power Voltage Detector(PVD).
 245:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the PVD.
 246:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 247:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @retval None
 248:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 249:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** void PWR_PVDCmd(FunctionalState NewState)
 250:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** {
 137              		.loc 1 250 1 is_stmt 1 view -0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141              		@ link register save eliminated.
 251:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 252:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 142              		.loc 1 252 3 view .LVU22
 253:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 254:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 143              		.loc 1 254 3 view .LVU23
 144              		.loc 1 254 33 is_stmt 0 view .LVU24
 145 0000 014B     		ldr	r3, .L10
 146 0002 1860     		str	r0, [r3]
 255:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** }
 147              		.loc 1 255 1 view .LVU25
 148 0004 7047     		bx	lr
 149              	.L11:
 150 0006 00BF     		.align	2
 151              	.L10:
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 8


 152 0008 10000E42 		.word	1108213776
 153              		.cfi_endproc
 154              	.LFE126:
 156              		.section	.text.PWR_WakeUpPinCmd,"ax",%progbits
 157              		.align	1
 158              		.global	PWR_WakeUpPinCmd
 159              		.syntax unified
 160              		.thumb
 161              		.thumb_func
 162              		.fpu fpv4-sp-d16
 164              	PWR_WakeUpPinCmd:
 165              	.LVL8:
 166              	.LFB127:
 256:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 257:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 258:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @}
 259:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 260:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 261:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group3 WakeUp pin configuration functions
 262:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *  @brief   WakeUp pin configuration functions 
 263:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *
 264:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** @verbatim   
 265:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****  ===============================================================================
 266:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****                  ##### WakeUp pin configuration functions #####
 267:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****  ===============================================================================  
 268:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     [..]
 269:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (+) WakeUp pin is used to wakeup the system from Standby mode. This pin is 
 270:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           forced in input pull down configuration and is active on rising edges.
 271:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (+) There is one Wake-up pin: Wake-up Pin 1 on PA.00.
 272:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 	   (++) For STM32F446xx there are two Wake-Up pins: Pin1 on PA.00 and Pin2 on PC.13
 273:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****            (++) For STM32F410xx/STM32F412xG/STM32F413_423xx there are three Wake-Up pins: Pin1 on P
 274:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** @endverbatim
 275:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @{
 276:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 277:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 278:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 279:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 280:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 281:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 282:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @retval None
 283:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 284:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** void PWR_WakeUpPinCmd(FunctionalState NewState)
 285:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** {
 167              		.loc 1 285 1 is_stmt 1 view -0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 286:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Check the parameters */  
 287:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 172              		.loc 1 287 3 view .LVU27
 288:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 289:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 173              		.loc 1 289 3 view .LVU28
 174              		.loc 1 289 34 is_stmt 0 view .LVU29
 175 0000 014B     		ldr	r3, .L13
 176 0002 1860     		str	r0, [r3]
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 9


 290:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** }
 177              		.loc 1 290 1 view .LVU30
 178 0004 7047     		bx	lr
 179              	.L14:
 180 0006 00BF     		.align	2
 181              	.L13:
 182 0008 A0000E42 		.word	1108213920
 183              		.cfi_endproc
 184              	.LFE127:
 186              		.section	.text.PWR_BackupRegulatorCmd,"ax",%progbits
 187              		.align	1
 188              		.global	PWR_BackupRegulatorCmd
 189              		.syntax unified
 190              		.thumb
 191              		.thumb_func
 192              		.fpu fpv4-sp-d16
 194              	PWR_BackupRegulatorCmd:
 195              	.LVL9:
 196              	.LFB128:
 291:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE */
 292:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 293:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx
 294:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 295:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 296:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  PWR_WakeUpPinx: specifies the WakeUp Pin.
 297:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 298:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_WakeUp_Pin1: WKUP1 pin is used for wakeup from Standby mode.
 299:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_WakeUp_Pin2: WKUP2 pin is used for wakeup from Standby mode.
 300:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_WakeUp_Pin3: WKUP3 pin is used for wakeup from Standby mode.(only for STM32
 301:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 302:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 303:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @retval None
 304:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 305:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** void PWR_WakeUpPinCmd(uint32_t PWR_WakeUpPinx, FunctionalState NewState)
 306:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** {
 307:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Check the parameters */  
 308:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 309:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(NewState));
 310:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   if(PWR_WakeUpPinx == PWR_WakeUp_Pin1) /* PWR_WakeUp_Pin1 */
 311:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   {
 312:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CSR_EWUP1_BB = (uint32_t)NewState;
 313:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
 314:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #if defined(STM32F410xx)|| defined(STM32F412xG) || defined(STM32F413_423xx)  
 315:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   else if(PWR_WakeUpPinx == PWR_WakeUp_Pin3) /* PWR_WakeUp_Pin3 */
 316:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   {
 317:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CSR_EWUP3_BB = (uint32_t)NewState;
 318:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
 319:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #endif /* STM32F410xx */  
 320:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   else /* PWR_WakeUp_Pin2 */
 321:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   {
 322:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CSR_EWUP2_BB = (uint32_t)NewState;
 323:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
 324:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** }
 325:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx || STM32F446xx */
 326:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 327:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 328:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @}
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 10


 329:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 330:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 331:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group4 Main and Backup Regulators configuration functions
 332:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *  @brief   Main and Backup Regulators configuration functions 
 333:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *
 334:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** @verbatim   
 335:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****  ===============================================================================
 336:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           ##### Main and Backup Regulators configuration functions #####
 337:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****  ===============================================================================  
 338:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     [..]
 339:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (+) The backup domain includes 4 Kbytes of backup SRAM accessible only from 
 340:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           the CPU, and address in 32-bit, 16-bit or 8-bit mode. Its content is 
 341:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           retained even in Standby or VBAT mode when the low power backup regulator
 342:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           is enabled. It can be considered as an internal EEPROM when VBAT is 
 343:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           always present. You can use the PWR_BackupRegulatorCmd() function to 
 344:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           enable the low power backup regulator and use the PWR_GetFlagStatus
 345:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           (PWR_FLAG_BRR) to check if it is ready or not. 
 346:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 347:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (+) When the backup domain is supplied by VDD (analog switch connected to VDD) 
 348:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           the backup SRAM is powered from VDD which replaces the VBAT power supply to 
 349:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           save battery life.
 350:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 351:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (+) The backup SRAM is not mass erased by an tamper event. It is read 
 352:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           protected to prevent confidential data, such as cryptographic private 
 353:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           key, from being accessed. The backup SRAM can be erased only through 
 354:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           the Flash interface when a protection level change from level 1 to 
 355:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           level 0 is requested. 
 356:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       -@- Refer to the description of Read protection (RDP) in the reference manual.
 357:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 358:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (+) The main internal regulator can be configured to have a tradeoff between 
 359:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           performance and power consumption when the device does not operate at 
 360:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           the maximum frequency. 
 361:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (+) For STM32F405xx/407xx and STM32F415xx/417xx  Devices, the regulator can be     
 362:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           configured on the fly through PWR_MainRegulatorModeConfig() function which  
 363:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           configure VOS bit in PWR_CR register:
 364:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         (++) When this bit is set (Regulator voltage output Scale 1 mode selected) 
 365:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****              the System frequency can go up to 168 MHz. 
 366:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         (++) When this bit is reset (Regulator voltage output Scale 2 mode selected) 
 367:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****              the System frequency can go up to 144 MHz.
 368:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****              
 369:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****        (+) For STM32F42xxx/43xxx Devices, the regulator can be configured through    
 370:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****            PWR_MainRegulatorModeConfig() function which configure VOS[1:0] bits in
 371:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****            PWR_CR register:  
 372:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****            which configure VOS[1:0] bits in PWR_CR register: 
 373:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         (++) When VOS[1:0] = 11 (Regulator voltage output Scale 1 mode selected) 
 374:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****              the System frequency can go up to 168 MHz. 
 375:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         (++) When VOS[1:0] = 10 (Regulator voltage output Scale 2 mode selected) 
 376:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****              the System frequency can go up to 144 MHz.  
 377:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         (++) When VOS[1:0] = 01 (Regulator voltage output Scale 3 mode selected) 
 378:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****              the System frequency can go up to 120 MHz. 
 379:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****                           
 380:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****        (+) For STM32F42xxx/43xxx Devices, the scale can be modified only when the PLL 
 381:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****            is OFF and the HSI or HSE clock source is selected as system clock. 
 382:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****            The new value programmed is active only when the PLL is ON.
 383:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****            When the PLL is OFF, the voltage scale 3 is automatically selected. 
 384:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         Refer to the datasheets for more details.
 385:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 11


 386:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****        (+) For STM32F42xxx/43xxx Devices, in Run mode: the main regulator has
 387:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****            2 operating modes available:
 388:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         (++) Normal mode: The CPU and core logic operate at maximum frequency at a given 
 389:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****              voltage scaling (scale 1, scale 2 or scale 3)
 390:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         (++) Over-drive mode: This mode allows the CPU and the core logic to operate at a 
 391:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****             higher frequency than the normal mode for a given voltage scaling (scale 1,  
 392:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****             scale 2 or scale 3). This mode is enabled through PWR_OverDriveCmd() function and
 393:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****             PWR_OverDriveSWCmd() function, to enter or exit from Over-drive mode please follow 
 394:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****             the sequence described in Reference manual.
 395:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****              
 396:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****        (+) For STM32F42xxx/43xxx Devices, in Stop mode: the main regulator or low power regulator 
 397:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****            supplies a low power voltage to the 1.2V domain, thus preserving the content of register
 398:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****            and internal SRAM. 2 operating modes are available:
 399:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****          (++) Normal mode: the 1.2V domain is preserved in nominal leakage mode. This mode is only 
 400:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****               available when the main regulator or the low power regulator is used in Scale 3 or 
 401:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****               low voltage mode.
 402:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****          (++) Under-drive mode: the 1.2V domain is preserved in reduced leakage mode. This mode is 
 403:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****               available when the main regulator or the low power regulator is in low voltage mode.
 404:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****               This mode is enabled through PWR_UnderDriveCmd() function.
 405:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****             
 406:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** @endverbatim
 407:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @{
 408:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 409:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 410:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 411:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Backup Regulator.
 412:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Backup Regulator.
 413:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 414:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @retval None
 415:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 416:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** void PWR_BackupRegulatorCmd(FunctionalState NewState)
 417:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** {
 197              		.loc 1 417 1 is_stmt 1 view -0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              		@ link register save eliminated.
 418:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 419:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 202              		.loc 1 419 3 view .LVU32
 420:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 421:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 203              		.loc 1 421 3 view .LVU33
 204              		.loc 1 421 33 is_stmt 0 view .LVU34
 205 0000 014B     		ldr	r3, .L16
 206 0002 1860     		str	r0, [r3]
 422:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** }
 207              		.loc 1 422 1 view .LVU35
 208 0004 7047     		bx	lr
 209              	.L17:
 210 0006 00BF     		.align	2
 211              	.L16:
 212 0008 A4000E42 		.word	1108213924
 213              		.cfi_endproc
 214              	.LFE128:
 216              		.section	.text.PWR_MainRegulatorModeConfig,"ax",%progbits
 217              		.align	1
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 12


 218              		.global	PWR_MainRegulatorModeConfig
 219              		.syntax unified
 220              		.thumb
 221              		.thumb_func
 222              		.fpu fpv4-sp-d16
 224              	PWR_MainRegulatorModeConfig:
 225              	.LVL10:
 226              	.LFB129:
 423:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 424:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 425:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief  Configures the main internal regulator output voltage.
 426:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator_Voltage: specifies the regulator output voltage to achieve
 427:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         a tradeoff between performance and power consumption when the device does
 428:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         not operate at the maximum frequency (refer to the datasheets for more details).
 429:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 430:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale1: Regulator voltage output Scale 1 mode, 
 431:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 168 MHz. 
 432:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale2: Regulator voltage output Scale 2 mode, 
 433:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 144 MHz.    
 434:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale3: Regulator voltage output Scale 3 mode, 
 435:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 120 MHz (only for STM32F4
 436:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @retval None
 437:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 438:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
 439:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** {
 227              		.loc 1 439 1 is_stmt 1 view -0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231              		@ link register save eliminated.
 440:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 232              		.loc 1 440 3 view .LVU37
 441:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 	
 442:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 443:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));
 233              		.loc 1 443 3 view .LVU38
 444:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 445:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 234              		.loc 1 445 3 view .LVU39
 235              		.loc 1 445 10 is_stmt 0 view .LVU40
 236 0000 034A     		ldr	r2, .L19
 237 0002 1368     		ldr	r3, [r2]
 238              	.LVL11:
 446:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 447:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Clear VOS[15:14] bits */
 448:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   tmpreg &= CR_VOS_MASK;
 239              		.loc 1 448 3 is_stmt 1 view .LVU41
 240              		.loc 1 448 10 is_stmt 0 view .LVU42
 241 0004 23F44043 		bic	r3, r3, #49152
 242              	.LVL12:
 449:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 450:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Set VOS[15:14] bits according to PWR_Regulator_Voltage value */
 451:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_Regulator_Voltage;
 243              		.loc 1 451 3 is_stmt 1 view .LVU43
 244              		.loc 1 451 10 is_stmt 0 view .LVU44
 245 0008 0343     		orrs	r3, r3, r0
 246              	.LVL13:
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 13


 452:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 453:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Store the new value */
 454:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 247              		.loc 1 454 3 is_stmt 1 view .LVU45
 248              		.loc 1 454 11 is_stmt 0 view .LVU46
 249 000a 1360     		str	r3, [r2]
 455:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** }
 250              		.loc 1 455 1 view .LVU47
 251 000c 7047     		bx	lr
 252              	.L20:
 253 000e 00BF     		.align	2
 254              	.L19:
 255 0010 00700040 		.word	1073770496
 256              		.cfi_endproc
 257              	.LFE129:
 259              		.section	.text.PWR_OverDriveCmd,"ax",%progbits
 260              		.align	1
 261              		.global	PWR_OverDriveCmd
 262              		.syntax unified
 263              		.thumb
 264              		.thumb_func
 265              		.fpu fpv4-sp-d16
 267              	PWR_OverDriveCmd:
 268              	.LVL14:
 269              	.LFB130:
 456:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 457:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 458:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Over-Drive.
 459:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * 
 460:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note   This function can be used only for STM32F42xxx/STM3243xxx devices.
 461:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         This mode allows the CPU and the core logic to operate at a higher frequency
 462:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         than the normal mode for a given voltage scaling (scale 1, scale 2 or scale 3).   
 463:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * 
 464:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note   It is recommended to enter or exit Over-drive mode when the application is not running 
 465:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          critical tasks and when the system clock source is either HSI or HSE. 
 466:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          During the Over-drive switch activation, no peripheral clocks should be enabled.   
 467:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          The peripheral clocks must be enabled once the Over-drive mode is activated.
 468:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            
 469:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Over Drive mode.
 470:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 471:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @retval None
 472:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 473:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** void PWR_OverDriveCmd(FunctionalState NewState)
 474:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** {
 270              		.loc 1 474 1 is_stmt 1 view -0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 0
 273              		@ frame_needed = 0, uses_anonymous_args = 0
 274              		@ link register save eliminated.
 475:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 476:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 275              		.loc 1 476 3 view .LVU49
 477:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 478:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Set/Reset the ODEN bit to enable/disable the Over Drive mode */
 479:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_ODEN_BB = (uint32_t)NewState;
 276              		.loc 1 479 3 view .LVU50
 277              		.loc 1 479 33 is_stmt 0 view .LVU51
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 14


 278 0000 014B     		ldr	r3, .L22
 279 0002 1860     		str	r0, [r3]
 480:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** }
 280              		.loc 1 480 1 view .LVU52
 281 0004 7047     		bx	lr
 282              	.L23:
 283 0006 00BF     		.align	2
 284              	.L22:
 285 0008 40000E42 		.word	1108213824
 286              		.cfi_endproc
 287              	.LFE130:
 289              		.section	.text.PWR_OverDriveSWCmd,"ax",%progbits
 290              		.align	1
 291              		.global	PWR_OverDriveSWCmd
 292              		.syntax unified
 293              		.thumb
 294              		.thumb_func
 295              		.fpu fpv4-sp-d16
 297              	PWR_OverDriveSWCmd:
 298              	.LVL15:
 299              	.LFB131:
 481:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 482:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 483:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Over-Drive switching.
 484:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * 
 485:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note   This function can be used only for STM32F42xxx/STM3243xxx devices. 
 486:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *       
 487:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Over Drive switching mode.
 488:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 489:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @retval None
 490:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 491:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** void PWR_OverDriveSWCmd(FunctionalState NewState)
 492:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** {
 300              		.loc 1 492 1 is_stmt 1 view -0
 301              		.cfi_startproc
 302              		@ args = 0, pretend = 0, frame = 0
 303              		@ frame_needed = 0, uses_anonymous_args = 0
 304              		@ link register save eliminated.
 493:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 494:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 305              		.loc 1 494 3 view .LVU54
 495:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 496:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Set/Reset the ODSWEN bit to enable/disable the Over Drive switching mode */
 497:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_ODSWEN_BB = (uint32_t)NewState;
 306              		.loc 1 497 3 view .LVU55
 307              		.loc 1 497 35 is_stmt 0 view .LVU56
 308 0000 014B     		ldr	r3, .L25
 309 0002 1860     		str	r0, [r3]
 498:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** }
 310              		.loc 1 498 1 view .LVU57
 311 0004 7047     		bx	lr
 312              	.L26:
 313 0006 00BF     		.align	2
 314              	.L25:
 315 0008 44000E42 		.word	1108213828
 316              		.cfi_endproc
 317              	.LFE131:
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 15


 319              		.section	.text.PWR_UnderDriveCmd,"ax",%progbits
 320              		.align	1
 321              		.global	PWR_UnderDriveCmd
 322              		.syntax unified
 323              		.thumb
 324              		.thumb_func
 325              		.fpu fpv4-sp-d16
 327              	PWR_UnderDriveCmd:
 328              	.LVL16:
 329              	.LFB132:
 499:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 500:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 501:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief   Enables or disables the Under-Drive mode.
 502:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * 
 503:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note   This function can be used only for STM32F42xxx/STM3243xxx devices.
 504:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note    This mode is enabled only with STOP low power mode.
 505:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          In this mode, the 1.2V domain is preserved in reduced leakage mode. This 
 506:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          mode is only available when the main regulator or the low power regulator 
 507:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          is in low voltage mode
 508:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *        
 509:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note   If the Under-drive mode was enabled, it is automatically disabled after 
 510:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         exiting Stop mode. 
 511:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         When the voltage regulator operates in Under-drive mode, an additional  
 512:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         startup delay is induced when waking up from Stop mode.
 513:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *                    
 514:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Under Drive mode.
 515:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 516:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @retval None
 517:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 518:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** void PWR_UnderDriveCmd(FunctionalState NewState)
 519:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** {
 330              		.loc 1 519 1 is_stmt 1 view -0
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 0
 333              		@ frame_needed = 0, uses_anonymous_args = 0
 334              		@ link register save eliminated.
 520:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 521:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 335              		.loc 1 521 3 view .LVU59
 522:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 523:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   if (NewState != DISABLE)
 336              		.loc 1 523 3 view .LVU60
 337              		.loc 1 523 6 is_stmt 0 view .LVU61
 338 0000 28B1     		cbz	r0, .L28
 524:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   {
 525:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     /* Set the UDEN[1:0] bits to enable the Under Drive mode */
 526:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     PWR->CR |= (uint32_t)PWR_CR_UDEN;
 339              		.loc 1 526 5 is_stmt 1 view .LVU62
 340              		.loc 1 526 13 is_stmt 0 view .LVU63
 341 0002 064A     		ldr	r2, .L30
 342 0004 1368     		ldr	r3, [r2]
 343 0006 43F44023 		orr	r3, r3, #786432
 344 000a 1360     		str	r3, [r2]
 345 000c 7047     		bx	lr
 346              	.L28:
 527:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
 528:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   else
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 16


 529:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   {
 530:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     /* Reset the UDEN[1:0] bits to disable the Under Drive mode */
 531:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     PWR->CR &= (uint32_t)(~PWR_CR_UDEN);
 347              		.loc 1 531 5 is_stmt 1 view .LVU64
 348              		.loc 1 531 13 is_stmt 0 view .LVU65
 349 000e 034A     		ldr	r2, .L30
 350 0010 1368     		ldr	r3, [r2]
 351 0012 23F44023 		bic	r3, r3, #786432
 352 0016 1360     		str	r3, [r2]
 532:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
 533:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** }
 353              		.loc 1 533 1 view .LVU66
 354 0018 7047     		bx	lr
 355              	.L31:
 356 001a 00BF     		.align	2
 357              	.L30:
 358 001c 00700040 		.word	1073770496
 359              		.cfi_endproc
 360              	.LFE132:
 362              		.section	.text.PWR_FlashPowerDownCmd,"ax",%progbits
 363              		.align	1
 364              		.global	PWR_FlashPowerDownCmd
 365              		.syntax unified
 366              		.thumb
 367              		.thumb_func
 368              		.fpu fpv4-sp-d16
 370              	PWR_FlashPowerDownCmd:
 371              	.LVL17:
 372              	.LFB133:
 534:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 535:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx)
 536:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 537:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief Enables or disables the Main Regulator under drive mode.
 538:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *
 539:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note  This mode is only available for STM32F427_437xx/STM32F429_439xx/STM32F446xx devices.
 540:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *
 541:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Main Regulator Under Drive mode.
 542:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 543:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @retval None
 544:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 545:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** void PWR_MainRegulatorUnderDriveCmd(FunctionalState NewState)
 546:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** { 
 547:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 548:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 549:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 550:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   if (NewState != DISABLE)
 551:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   {
 552:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_MRUDS_BB = (uint32_t)ENABLE;
 553:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
 554:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   else
 555:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   {
 556:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_MRUDS_BB = (uint32_t)DISABLE;
 557:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
 558:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** }
 559:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 560:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 561:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief Enables or disables the Low Power Regulator under drive mode.
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 17


 562:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *
 563:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note  This mode is only available for STM32F427_437xx/STM32F429_439xx/STM32F446xx devices.
 564:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *
 565:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Low Power Regulator Under Drive mode.
 566:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 567:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @retval None
 568:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 569:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** void PWR_LowRegulatorUnderDriveCmd(FunctionalState NewState)
 570:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** {
 571:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 572:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 573:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 574:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   if (NewState != DISABLE)
 575:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   {
 576:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_LPUDS_BB = (uint32_t)ENABLE;
 577:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
 578:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   else
 579:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   {
 580:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_LPUDS_BB = (uint32_t)DISABLE;
 581:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
 582:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** }
 583:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #endif /* STM32F427_437xx || STM32F429_439xx || STM32F446xx */
 584:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 585:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #if defined(STM32F401xx) || defined(STM32F410xx) || defined(STM32F411xE) || defined(STM32F412xG) ||
 586:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 587:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief Enables or disables the Main Regulator low voltage mode.
 588:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *
 589:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note  This mode is only available for STM32F401xx/STM32F410xx/STM32F411xx/STM32F412xG/STM32F41
 590:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *
 591:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Main Regulator Low Voltage mode.
 592:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 593:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @retval None
 594:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 595:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** void PWR_MainRegulatorLowVoltageCmd(FunctionalState NewState)
 596:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** { 
 597:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 598:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 599:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 600:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   if (NewState != DISABLE)
 601:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   {
 602:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_MRLVDS_BB = (uint32_t)ENABLE;
 603:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
 604:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   else
 605:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   {
 606:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_MRLVDS_BB = (uint32_t)DISABLE;
 607:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
 608:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** }
 609:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 610:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 611:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief Enables or disables the Low Power Regulator low voltage mode.
 612:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *
 613:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note  This mode is only available for STM32F401xx/STM32F410xx/STM32F411xx/STM32F412xG/STM32F41
 614:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *
 615:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Low Power Regulator Low Voltage mode.
 616:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 617:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @retval None
 618:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 18


 619:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** void PWR_LowRegulatorLowVoltageCmd(FunctionalState NewState)
 620:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** {
 621:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 622:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 623:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 624:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   if (NewState != DISABLE)
 625:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   {
 626:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_LPLVDS_BB = (uint32_t)ENABLE;
 627:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
 628:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   else
 629:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   {
 630:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_LPLVDS_BB = (uint32_t)DISABLE;
 631:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
 632:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** }
 633:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #endif /* STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F413_423xx */
 634:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 635:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 636:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @}
 637:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 638:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 639:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group5 FLASH Power Down configuration functions
 640:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *  @brief   FLASH Power Down configuration functions 
 641:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *
 642:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** @verbatim   
 643:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****  ===============================================================================
 644:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****              ##### FLASH Power Down configuration functions #####
 645:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****  ===============================================================================  
 646:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     [..]
 647:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (+) By setting the FPDS bit in the PWR_CR register by using the 
 648:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           PWR_FlashPowerDownCmd() function, the Flash memory also enters power 
 649:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           down mode when the device enters Stop mode. When the Flash memory 
 650:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           is in power down mode, an additional startup delay is incurred when 
 651:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           waking up from Stop mode.
 652:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** @endverbatim
 653:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @{
 654:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 655:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 656:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 657:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Flash Power Down in STOP mode.
 658:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Flash power mode.
 659:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 660:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @retval None
 661:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 662:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** void PWR_FlashPowerDownCmd(FunctionalState NewState)
 663:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** {
 373              		.loc 1 663 1 is_stmt 1 view -0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 0
 376              		@ frame_needed = 0, uses_anonymous_args = 0
 377              		@ link register save eliminated.
 664:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 665:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 378              		.loc 1 665 3 view .LVU68
 666:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 667:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 379              		.loc 1 667 3 view .LVU69
 380              		.loc 1 667 33 is_stmt 0 view .LVU70
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 19


 381 0000 014B     		ldr	r3, .L33
 382 0002 1860     		str	r0, [r3]
 668:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** }
 383              		.loc 1 668 1 view .LVU71
 384 0004 7047     		bx	lr
 385              	.L34:
 386 0006 00BF     		.align	2
 387              	.L33:
 388 0008 24000E42 		.word	1108213796
 389              		.cfi_endproc
 390              	.LFE133:
 392              		.section	.text.PWR_EnterSTOPMode,"ax",%progbits
 393              		.align	1
 394              		.global	PWR_EnterSTOPMode
 395              		.syntax unified
 396              		.thumb
 397              		.thumb_func
 398              		.fpu fpv4-sp-d16
 400              	PWR_EnterSTOPMode:
 401              	.LVL18:
 402              	.LFB134:
 669:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 670:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 671:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @}
 672:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 673:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 674:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group6 Low Power modes configuration functions
 675:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *  @brief   Low Power modes configuration functions 
 676:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *
 677:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** @verbatim   
 678:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****  ===============================================================================
 679:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****               ##### Low Power modes configuration functions #####
 680:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****  ===============================================================================  
 681:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     [..]
 682:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       The devices feature 3 low-power modes:
 683:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (+) Sleep mode: Cortex-M4 core stopped, peripherals kept running.
 684:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (+) Stop mode: all clocks are stopped, regulator running, regulator 
 685:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           in low power mode
 686:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (+) Standby mode: 1.2V domain powered off.
 687:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****    
 688:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****    *** Sleep mode ***
 689:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****    ==================
 690:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     [..]
 691:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (+) Entry:
 692:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         (++) The Sleep mode is entered by using the __WFI() or __WFE() functions.
 693:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (+) Exit:
 694:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         (++) Any peripheral interrupt acknowledged by the nested vectored interrupt 
 695:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****              controller (NVIC) can wake up the device from Sleep mode.
 696:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 697:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****    *** Stop mode ***
 698:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****    =================
 699:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     [..]
 700:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       In Stop mode, all clocks in the 1.2V domain are stopped, the PLL, the HSI,
 701:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       and the HSE RC oscillators are disabled. Internal SRAM and register contents 
 702:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       are preserved.
 703:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       The voltage regulator can be configured either in normal or low-power mode.
 704:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       To minimize the consumption In Stop mode, FLASH can be powered off before 
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 20


 705:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       entering the Stop mode. It can be switched on again by software after exiting 
 706:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       the Stop mode using the PWR_FlashPowerDownCmd() function. 
 707:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****    
 708:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (+) Entry:
 709:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         (++) The Stop mode is entered using the PWR_EnterSTOPMode(PWR_MainRegulator_ON) 
 710:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****              function with:
 711:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           (+++) Main regulator ON.
 712:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           (+++) Low Power regulator ON.
 713:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (+) Exit:
 714:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         (++) Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 715:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       
 716:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****    *** Standby mode ***
 717:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****    ====================
 718:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     [..]
 719:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       The Standby mode allows to achieve the lowest power consumption. It is based 
 720:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       on the Cortex-M4 deepsleep mode, with the voltage regulator disabled. 
 721:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       The 1.2V domain is consequently powered off. The PLL, the HSI oscillator and 
 722:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       the HSE oscillator are also switched off. SRAM and register contents are lost 
 723:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       except for the RTC registers, RTC backup registers, backup SRAM and Standby 
 724:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       circuitry.
 725:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****    
 726:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       The voltage regulator is OFF.
 727:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       
 728:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (+) Entry:
 729:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         (++) The Standby mode is entered using the PWR_EnterSTANDBYMode() function.
 730:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (+) Exit:
 731:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         (++) WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wakeup,
 732:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****              tamper event, time-stamp event, external reset in NRST pin, IWDG reset.              
 733:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 734:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****    *** Auto-wakeup (AWU) from low-power mode ***
 735:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****    =============================================
 736:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     [..]
 737:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC 
 738:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       Wakeup event, a tamper event, a time-stamp event, or a comparator event, 
 739:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       without depending on an external interrupt (Auto-wakeup mode).
 740:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 741:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (#) RTC auto-wakeup (AWU) from the Stop mode
 742:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****        
 743:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to:
 744:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           (+++) Configure the EXTI Line 17 to be sensitive to rising edges (Interrupt 
 745:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****                 or Event modes) using the EXTI_Init() function.
 746:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           (+++) Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 747:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           (+++) Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 748:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****                 and RTC_AlarmCmd() functions.
 749:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         (++) To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
 750:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****              is necessary to:
 751:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           (+++) Configure the EXTI Line 21 to be sensitive to rising edges (Interrupt 
 752:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****                 or Event modes) using the EXTI_Init() function.
 753:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           (+++) Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 754:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****                 function
 755:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           (+++) Configure the RTC to detect the tamper or time stamp event using the
 756:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****                 RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 757:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****                 functions.
 758:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         (++) To wake up from the Stop mode with an RTC WakeUp event, it is necessary to:
 759:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****            (+++) Configure the EXTI Line 22 to be sensitive to rising edges (Interrupt 
 760:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****                  or Event modes) using the EXTI_Init() function.
 761:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****            (+++) Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 21


 762:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****            (+++) Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig
 763:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****                  RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 764:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 765:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****       (#) RTC auto-wakeup (AWU) from the Standby mode
 766:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****    
 767:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         (++) To wake up from the Standby mode with an RTC alarm event, it is necessary to:
 768:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           (+++) Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 769:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           (+++) Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 770:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****                 and RTC_AlarmCmd() functions.
 771:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         (++) To wake up from the Standby mode with an RTC Tamper or time stamp event, it 
 772:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****              is necessary to:
 773:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           (+++) Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 774:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****                 function
 775:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           (+++) Configure the RTC to detect the tamper or time stamp event using the
 776:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****                 RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 777:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****                 functions.
 778:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****         (++) To wake up from the Standby mode with an RTC WakeUp event, it is necessary to:
 779:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           (+++) Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 780:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****           (+++) Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(
 781:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****                 RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 782:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 783:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** @endverbatim
 784:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @{
 785:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 786:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 787:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 788:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief  Enters STOP mode.
 789:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *   
 790:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 791:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
 792:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 793:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note   When the voltage regulator operates in low power mode, an additional 
 794:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 795:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 796:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         is higher although the startup time is reduced.
 797:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *     
 798:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 799:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 800:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_MainRegulator_ON: STOP mode with regulator ON
 801:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_LowPowerRegulator_ON: STOP mode with low power regulator ON
 802:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 803:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 804:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 805:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 806:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @retval None
 807:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 808:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 809:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** {
 403              		.loc 1 809 1 is_stmt 1 view -0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407              		@ link register save eliminated.
 810:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 408              		.loc 1 810 3 view .LVU73
 811:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 812:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Check the parameters */
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 22


 813:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 409              		.loc 1 813 3 view .LVU74
 814:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 410              		.loc 1 814 3 view .LVU75
 815:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 816:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 817:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 411              		.loc 1 817 3 view .LVU76
 412              		.loc 1 817 10 is_stmt 0 view .LVU77
 413 0000 0B4A     		ldr	r2, .L39
 414 0002 1368     		ldr	r3, [r2]
 415              	.LVL19:
 818:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Clear PDDS and LPDS bits */
 819:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   tmpreg &= CR_DS_MASK;
 416              		.loc 1 819 3 is_stmt 1 view .LVU78
 417              		.loc 1 819 10 is_stmt 0 view .LVU79
 418 0004 23F44063 		bic	r3, r3, #3072
 419              	.LVL20:
 420              		.loc 1 819 10 view .LVU80
 421 0008 23F00303 		bic	r3, r3, #3
 422              	.LVL21:
 820:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 821:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Set LPDS, MRLVDS and LPLVDS bits according to PWR_Regulator value */
 822:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_Regulator;
 423              		.loc 1 822 3 is_stmt 1 view .LVU81
 424              		.loc 1 822 10 is_stmt 0 view .LVU82
 425 000c 0343     		orrs	r3, r3, r0
 426              	.LVL22:
 823:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 824:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Store the new value */
 825:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 427              		.loc 1 825 3 is_stmt 1 view .LVU83
 428              		.loc 1 825 11 is_stmt 0 view .LVU84
 429 000e 1360     		str	r3, [r2]
 826:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 827:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 828:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 430              		.loc 1 828 3 is_stmt 1 view .LVU85
 431              		.loc 1 828 12 is_stmt 0 view .LVU86
 432 0010 084A     		ldr	r2, .L39+4
 433 0012 1369     		ldr	r3, [r2, #16]
 434              	.LVL23:
 435              		.loc 1 828 12 view .LVU87
 436 0014 43F00403 		orr	r3, r3, #4
 437 0018 1361     		str	r3, [r2, #16]
 438              	.LVL24:
 829:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 830:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 831:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 439              		.loc 1 831 3 is_stmt 1 view .LVU88
 440              		.loc 1 831 5 is_stmt 0 view .LVU89
 441 001a 0129     		cmp	r1, #1
 442 001c 06D0     		beq	.L38
 832:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   {   
 833:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     /* Request Wait For Interrupt */
 834:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     __WFI();
 835:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 23


 836:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   else
 837:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   {
 838:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     /* Request Wait For Event */
 839:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     __WFE();
 443              		.loc 1 839 5 is_stmt 1 view .LVU90
 444              	.LBB12:
 445              	.LBI12:
 446              		.file 2 "STM32F4xx_LIB/core/core_cmInstr.h"
   1:STM32F4xx_LIB/core/core_cmInstr.h **** /**************************************************************************//**
   2:STM32F4xx_LIB/core/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:STM32F4xx_LIB/core/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:STM32F4xx_LIB/core/core_cmInstr.h ****  * @version  V4.10
   5:STM32F4xx_LIB/core/core_cmInstr.h ****  * @date     18. March 2015
   6:STM32F4xx_LIB/core/core_cmInstr.h ****  *
   7:STM32F4xx_LIB/core/core_cmInstr.h ****  * @note
   8:STM32F4xx_LIB/core/core_cmInstr.h ****  *
   9:STM32F4xx_LIB/core/core_cmInstr.h ****  ******************************************************************************/
  10:STM32F4xx_LIB/core/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:STM32F4xx_LIB/core/core_cmInstr.h **** 
  12:STM32F4xx_LIB/core/core_cmInstr.h ****    All rights reserved.
  13:STM32F4xx_LIB/core/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:STM32F4xx_LIB/core/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:STM32F4xx_LIB/core/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:STM32F4xx_LIB/core/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:STM32F4xx_LIB/core/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:STM32F4xx_LIB/core/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:STM32F4xx_LIB/core/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:STM32F4xx_LIB/core/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:STM32F4xx_LIB/core/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:STM32F4xx_LIB/core/core_cmInstr.h ****      specific prior written permission.
  23:STM32F4xx_LIB/core/core_cmInstr.h ****    *
  24:STM32F4xx_LIB/core/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:STM32F4xx_LIB/core/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:STM32F4xx_LIB/core/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:STM32F4xx_LIB/core/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:STM32F4xx_LIB/core/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:STM32F4xx_LIB/core/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:STM32F4xx_LIB/core/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:STM32F4xx_LIB/core/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:STM32F4xx_LIB/core/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:STM32F4xx_LIB/core/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:STM32F4xx_LIB/core/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:STM32F4xx_LIB/core/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:STM32F4xx_LIB/core/core_cmInstr.h **** 
  37:STM32F4xx_LIB/core/core_cmInstr.h **** 
  38:STM32F4xx_LIB/core/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:STM32F4xx_LIB/core/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:STM32F4xx_LIB/core/core_cmInstr.h **** 
  41:STM32F4xx_LIB/core/core_cmInstr.h **** 
  42:STM32F4xx_LIB/core/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:STM32F4xx_LIB/core/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:STM32F4xx_LIB/core/core_cmInstr.h ****   Access to dedicated instructions
  45:STM32F4xx_LIB/core/core_cmInstr.h ****   @{
  46:STM32F4xx_LIB/core/core_cmInstr.h **** */
  47:STM32F4xx_LIB/core/core_cmInstr.h **** 
  48:STM32F4xx_LIB/core/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:STM32F4xx_LIB/core/core_cmInstr.h **** /* ARM armcc specific functions */
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 24


  50:STM32F4xx_LIB/core/core_cmInstr.h **** 
  51:STM32F4xx_LIB/core/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:STM32F4xx_LIB/core/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:STM32F4xx_LIB/core/core_cmInstr.h **** #endif
  54:STM32F4xx_LIB/core/core_cmInstr.h **** 
  55:STM32F4xx_LIB/core/core_cmInstr.h **** 
  56:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  No Operation
  57:STM32F4xx_LIB/core/core_cmInstr.h **** 
  58:STM32F4xx_LIB/core/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:STM32F4xx_LIB/core/core_cmInstr.h ****  */
  60:STM32F4xx_LIB/core/core_cmInstr.h **** #define __NOP                             __nop
  61:STM32F4xx_LIB/core/core_cmInstr.h **** 
  62:STM32F4xx_LIB/core/core_cmInstr.h **** 
  63:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:STM32F4xx_LIB/core/core_cmInstr.h **** 
  65:STM32F4xx_LIB/core/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:STM32F4xx_LIB/core/core_cmInstr.h ****     until one of a number of events occurs.
  67:STM32F4xx_LIB/core/core_cmInstr.h ****  */
  68:STM32F4xx_LIB/core/core_cmInstr.h **** #define __WFI                             __wfi
  69:STM32F4xx_LIB/core/core_cmInstr.h **** 
  70:STM32F4xx_LIB/core/core_cmInstr.h **** 
  71:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  Wait For Event
  72:STM32F4xx_LIB/core/core_cmInstr.h **** 
  73:STM32F4xx_LIB/core/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:STM32F4xx_LIB/core/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:STM32F4xx_LIB/core/core_cmInstr.h ****  */
  76:STM32F4xx_LIB/core/core_cmInstr.h **** #define __WFE                             __wfe
  77:STM32F4xx_LIB/core/core_cmInstr.h **** 
  78:STM32F4xx_LIB/core/core_cmInstr.h **** 
  79:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  Send Event
  80:STM32F4xx_LIB/core/core_cmInstr.h **** 
  81:STM32F4xx_LIB/core/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:STM32F4xx_LIB/core/core_cmInstr.h ****  */
  83:STM32F4xx_LIB/core/core_cmInstr.h **** #define __SEV                             __sev
  84:STM32F4xx_LIB/core/core_cmInstr.h **** 
  85:STM32F4xx_LIB/core/core_cmInstr.h **** 
  86:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:STM32F4xx_LIB/core/core_cmInstr.h **** 
  88:STM32F4xx_LIB/core/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:STM32F4xx_LIB/core/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:STM32F4xx_LIB/core/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:STM32F4xx_LIB/core/core_cmInstr.h ****  */
  92:STM32F4xx_LIB/core/core_cmInstr.h **** #define __ISB() do {\
  93:STM32F4xx_LIB/core/core_cmInstr.h ****                    __schedule_barrier();\
  94:STM32F4xx_LIB/core/core_cmInstr.h ****                    __isb(0xF);\
  95:STM32F4xx_LIB/core/core_cmInstr.h ****                    __schedule_barrier();\
  96:STM32F4xx_LIB/core/core_cmInstr.h ****                 } while (0)
  97:STM32F4xx_LIB/core/core_cmInstr.h **** 
  98:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:STM32F4xx_LIB/core/core_cmInstr.h **** 
 100:STM32F4xx_LIB/core/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:STM32F4xx_LIB/core/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 103:STM32F4xx_LIB/core/core_cmInstr.h **** #define __DSB() do {\
 104:STM32F4xx_LIB/core/core_cmInstr.h ****                    __schedule_barrier();\
 105:STM32F4xx_LIB/core/core_cmInstr.h ****                    __dsb(0xF);\
 106:STM32F4xx_LIB/core/core_cmInstr.h ****                    __schedule_barrier();\
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 25


 107:STM32F4xx_LIB/core/core_cmInstr.h ****                 } while (0)
 108:STM32F4xx_LIB/core/core_cmInstr.h **** 
 109:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:STM32F4xx_LIB/core/core_cmInstr.h **** 
 111:STM32F4xx_LIB/core/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:STM32F4xx_LIB/core/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 114:STM32F4xx_LIB/core/core_cmInstr.h **** #define __DMB() do {\
 115:STM32F4xx_LIB/core/core_cmInstr.h ****                    __schedule_barrier();\
 116:STM32F4xx_LIB/core/core_cmInstr.h ****                    __dmb(0xF);\
 117:STM32F4xx_LIB/core/core_cmInstr.h ****                    __schedule_barrier();\
 118:STM32F4xx_LIB/core/core_cmInstr.h ****                 } while (0)
 119:STM32F4xx_LIB/core/core_cmInstr.h **** 
 120:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:STM32F4xx_LIB/core/core_cmInstr.h **** 
 122:STM32F4xx_LIB/core/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:STM32F4xx_LIB/core/core_cmInstr.h **** 
 124:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:STM32F4xx_LIB/core/core_cmInstr.h ****     \return               Reversed value
 126:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 127:STM32F4xx_LIB/core/core_cmInstr.h **** #define __REV                             __rev
 128:STM32F4xx_LIB/core/core_cmInstr.h **** 
 129:STM32F4xx_LIB/core/core_cmInstr.h **** 
 130:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:STM32F4xx_LIB/core/core_cmInstr.h **** 
 132:STM32F4xx_LIB/core/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:STM32F4xx_LIB/core/core_cmInstr.h **** 
 134:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:STM32F4xx_LIB/core/core_cmInstr.h ****     \return               Reversed value
 136:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 137:STM32F4xx_LIB/core/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:STM32F4xx_LIB/core/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:STM32F4xx_LIB/core/core_cmInstr.h **** {
 140:STM32F4xx_LIB/core/core_cmInstr.h ****   rev16 r0, r0
 141:STM32F4xx_LIB/core/core_cmInstr.h ****   bx lr
 142:STM32F4xx_LIB/core/core_cmInstr.h **** }
 143:STM32F4xx_LIB/core/core_cmInstr.h **** #endif
 144:STM32F4xx_LIB/core/core_cmInstr.h **** 
 145:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:STM32F4xx_LIB/core/core_cmInstr.h **** 
 147:STM32F4xx_LIB/core/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:STM32F4xx_LIB/core/core_cmInstr.h **** 
 149:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:STM32F4xx_LIB/core/core_cmInstr.h ****     \return               Reversed value
 151:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 152:STM32F4xx_LIB/core/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:STM32F4xx_LIB/core/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:STM32F4xx_LIB/core/core_cmInstr.h **** {
 155:STM32F4xx_LIB/core/core_cmInstr.h ****   revsh r0, r0
 156:STM32F4xx_LIB/core/core_cmInstr.h ****   bx lr
 157:STM32F4xx_LIB/core/core_cmInstr.h **** }
 158:STM32F4xx_LIB/core/core_cmInstr.h **** #endif
 159:STM32F4xx_LIB/core/core_cmInstr.h **** 
 160:STM32F4xx_LIB/core/core_cmInstr.h **** 
 161:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:STM32F4xx_LIB/core/core_cmInstr.h **** 
 163:STM32F4xx_LIB/core/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 26


 164:STM32F4xx_LIB/core/core_cmInstr.h **** 
 165:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:STM32F4xx_LIB/core/core_cmInstr.h ****     \return               Rotated value
 168:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 169:STM32F4xx_LIB/core/core_cmInstr.h **** #define __ROR                             __ror
 170:STM32F4xx_LIB/core/core_cmInstr.h **** 
 171:STM32F4xx_LIB/core/core_cmInstr.h **** 
 172:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  Breakpoint
 173:STM32F4xx_LIB/core/core_cmInstr.h **** 
 174:STM32F4xx_LIB/core/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:STM32F4xx_LIB/core/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:STM32F4xx_LIB/core/core_cmInstr.h **** 
 177:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:STM32F4xx_LIB/core/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 180:STM32F4xx_LIB/core/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:STM32F4xx_LIB/core/core_cmInstr.h **** 
 182:STM32F4xx_LIB/core/core_cmInstr.h **** 
 183:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:STM32F4xx_LIB/core/core_cmInstr.h **** 
 185:STM32F4xx_LIB/core/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:STM32F4xx_LIB/core/core_cmInstr.h **** 
 187:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:STM32F4xx_LIB/core/core_cmInstr.h ****     \return               Reversed value
 189:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 190:STM32F4xx_LIB/core/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:STM32F4xx_LIB/core/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:STM32F4xx_LIB/core/core_cmInstr.h **** #else
 193:STM32F4xx_LIB/core/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:STM32F4xx_LIB/core/core_cmInstr.h **** {
 195:STM32F4xx_LIB/core/core_cmInstr.h ****   uint32_t result;
 196:STM32F4xx_LIB/core/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:STM32F4xx_LIB/core/core_cmInstr.h **** 
 198:STM32F4xx_LIB/core/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:STM32F4xx_LIB/core/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:STM32F4xx_LIB/core/core_cmInstr.h ****   {
 201:STM32F4xx_LIB/core/core_cmInstr.h ****     result <<= 1;
 202:STM32F4xx_LIB/core/core_cmInstr.h ****     result |= value & 1;
 203:STM32F4xx_LIB/core/core_cmInstr.h ****     s--;
 204:STM32F4xx_LIB/core/core_cmInstr.h ****   }
 205:STM32F4xx_LIB/core/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:STM32F4xx_LIB/core/core_cmInstr.h ****   return(result);
 207:STM32F4xx_LIB/core/core_cmInstr.h **** }
 208:STM32F4xx_LIB/core/core_cmInstr.h **** #endif
 209:STM32F4xx_LIB/core/core_cmInstr.h **** 
 210:STM32F4xx_LIB/core/core_cmInstr.h **** 
 211:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  Count leading zeros
 212:STM32F4xx_LIB/core/core_cmInstr.h **** 
 213:STM32F4xx_LIB/core/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:STM32F4xx_LIB/core/core_cmInstr.h **** 
 215:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:STM32F4xx_LIB/core/core_cmInstr.h ****     \return             number of leading zeros in value
 217:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 218:STM32F4xx_LIB/core/core_cmInstr.h **** #define __CLZ                             __clz
 219:STM32F4xx_LIB/core/core_cmInstr.h **** 
 220:STM32F4xx_LIB/core/core_cmInstr.h **** 
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 27


 221:STM32F4xx_LIB/core/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:STM32F4xx_LIB/core/core_cmInstr.h **** 
 223:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:STM32F4xx_LIB/core/core_cmInstr.h **** 
 225:STM32F4xx_LIB/core/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:STM32F4xx_LIB/core/core_cmInstr.h **** 
 227:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:STM32F4xx_LIB/core/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 230:STM32F4xx_LIB/core/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:STM32F4xx_LIB/core/core_cmInstr.h **** 
 232:STM32F4xx_LIB/core/core_cmInstr.h **** 
 233:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:STM32F4xx_LIB/core/core_cmInstr.h **** 
 235:STM32F4xx_LIB/core/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:STM32F4xx_LIB/core/core_cmInstr.h **** 
 237:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:STM32F4xx_LIB/core/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 240:STM32F4xx_LIB/core/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:STM32F4xx_LIB/core/core_cmInstr.h **** 
 242:STM32F4xx_LIB/core/core_cmInstr.h **** 
 243:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:STM32F4xx_LIB/core/core_cmInstr.h **** 
 245:STM32F4xx_LIB/core/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:STM32F4xx_LIB/core/core_cmInstr.h **** 
 247:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:STM32F4xx_LIB/core/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 250:STM32F4xx_LIB/core/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:STM32F4xx_LIB/core/core_cmInstr.h **** 
 252:STM32F4xx_LIB/core/core_cmInstr.h **** 
 253:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:STM32F4xx_LIB/core/core_cmInstr.h **** 
 255:STM32F4xx_LIB/core/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:STM32F4xx_LIB/core/core_cmInstr.h **** 
 257:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]  value  Value to store
 258:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:STM32F4xx_LIB/core/core_cmInstr.h ****     \return          0  Function succeeded
 260:STM32F4xx_LIB/core/core_cmInstr.h ****     \return          1  Function failed
 261:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 262:STM32F4xx_LIB/core/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:STM32F4xx_LIB/core/core_cmInstr.h **** 
 264:STM32F4xx_LIB/core/core_cmInstr.h **** 
 265:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:STM32F4xx_LIB/core/core_cmInstr.h **** 
 267:STM32F4xx_LIB/core/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:STM32F4xx_LIB/core/core_cmInstr.h **** 
 269:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]  value  Value to store
 270:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:STM32F4xx_LIB/core/core_cmInstr.h ****     \return          0  Function succeeded
 272:STM32F4xx_LIB/core/core_cmInstr.h ****     \return          1  Function failed
 273:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 274:STM32F4xx_LIB/core/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:STM32F4xx_LIB/core/core_cmInstr.h **** 
 276:STM32F4xx_LIB/core/core_cmInstr.h **** 
 277:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 28


 278:STM32F4xx_LIB/core/core_cmInstr.h **** 
 279:STM32F4xx_LIB/core/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:STM32F4xx_LIB/core/core_cmInstr.h **** 
 281:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]  value  Value to store
 282:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:STM32F4xx_LIB/core/core_cmInstr.h ****     \return          0  Function succeeded
 284:STM32F4xx_LIB/core/core_cmInstr.h ****     \return          1  Function failed
 285:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 286:STM32F4xx_LIB/core/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:STM32F4xx_LIB/core/core_cmInstr.h **** 
 288:STM32F4xx_LIB/core/core_cmInstr.h **** 
 289:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:STM32F4xx_LIB/core/core_cmInstr.h **** 
 291:STM32F4xx_LIB/core/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:STM32F4xx_LIB/core/core_cmInstr.h **** 
 293:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 294:STM32F4xx_LIB/core/core_cmInstr.h **** #define __CLREX                           __clrex
 295:STM32F4xx_LIB/core/core_cmInstr.h **** 
 296:STM32F4xx_LIB/core/core_cmInstr.h **** 
 297:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  Signed Saturate
 298:STM32F4xx_LIB/core/core_cmInstr.h **** 
 299:STM32F4xx_LIB/core/core_cmInstr.h ****     This function saturates a signed value.
 300:STM32F4xx_LIB/core/core_cmInstr.h **** 
 301:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:STM32F4xx_LIB/core/core_cmInstr.h ****     \return             Saturated value
 304:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 305:STM32F4xx_LIB/core/core_cmInstr.h **** #define __SSAT                            __ssat
 306:STM32F4xx_LIB/core/core_cmInstr.h **** 
 307:STM32F4xx_LIB/core/core_cmInstr.h **** 
 308:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:STM32F4xx_LIB/core/core_cmInstr.h **** 
 310:STM32F4xx_LIB/core/core_cmInstr.h ****     This function saturates an unsigned value.
 311:STM32F4xx_LIB/core/core_cmInstr.h **** 
 312:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:STM32F4xx_LIB/core/core_cmInstr.h ****     \return             Saturated value
 315:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 316:STM32F4xx_LIB/core/core_cmInstr.h **** #define __USAT                            __usat
 317:STM32F4xx_LIB/core/core_cmInstr.h **** 
 318:STM32F4xx_LIB/core/core_cmInstr.h **** 
 319:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:STM32F4xx_LIB/core/core_cmInstr.h **** 
 321:STM32F4xx_LIB/core/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:STM32F4xx_LIB/core/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:STM32F4xx_LIB/core/core_cmInstr.h **** 
 324:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:STM32F4xx_LIB/core/core_cmInstr.h ****     \return               Rotated value
 326:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 327:STM32F4xx_LIB/core/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:STM32F4xx_LIB/core/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:STM32F4xx_LIB/core/core_cmInstr.h **** {
 330:STM32F4xx_LIB/core/core_cmInstr.h ****   rrx r0, r0
 331:STM32F4xx_LIB/core/core_cmInstr.h ****   bx lr
 332:STM32F4xx_LIB/core/core_cmInstr.h **** }
 333:STM32F4xx_LIB/core/core_cmInstr.h **** #endif
 334:STM32F4xx_LIB/core/core_cmInstr.h **** 
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 29


 335:STM32F4xx_LIB/core/core_cmInstr.h **** 
 336:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:STM32F4xx_LIB/core/core_cmInstr.h **** 
 338:STM32F4xx_LIB/core/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:STM32F4xx_LIB/core/core_cmInstr.h **** 
 340:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:STM32F4xx_LIB/core/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 343:STM32F4xx_LIB/core/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:STM32F4xx_LIB/core/core_cmInstr.h **** 
 345:STM32F4xx_LIB/core/core_cmInstr.h **** 
 346:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:STM32F4xx_LIB/core/core_cmInstr.h **** 
 348:STM32F4xx_LIB/core/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:STM32F4xx_LIB/core/core_cmInstr.h **** 
 350:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:STM32F4xx_LIB/core/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 353:STM32F4xx_LIB/core/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:STM32F4xx_LIB/core/core_cmInstr.h **** 
 355:STM32F4xx_LIB/core/core_cmInstr.h **** 
 356:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:STM32F4xx_LIB/core/core_cmInstr.h **** 
 358:STM32F4xx_LIB/core/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:STM32F4xx_LIB/core/core_cmInstr.h **** 
 360:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:STM32F4xx_LIB/core/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 363:STM32F4xx_LIB/core/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:STM32F4xx_LIB/core/core_cmInstr.h **** 
 365:STM32F4xx_LIB/core/core_cmInstr.h **** 
 366:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:STM32F4xx_LIB/core/core_cmInstr.h **** 
 368:STM32F4xx_LIB/core/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:STM32F4xx_LIB/core/core_cmInstr.h **** 
 370:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]  value  Value to store
 371:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 373:STM32F4xx_LIB/core/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:STM32F4xx_LIB/core/core_cmInstr.h **** 
 375:STM32F4xx_LIB/core/core_cmInstr.h **** 
 376:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:STM32F4xx_LIB/core/core_cmInstr.h **** 
 378:STM32F4xx_LIB/core/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:STM32F4xx_LIB/core/core_cmInstr.h **** 
 380:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]  value  Value to store
 381:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 383:STM32F4xx_LIB/core/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:STM32F4xx_LIB/core/core_cmInstr.h **** 
 385:STM32F4xx_LIB/core/core_cmInstr.h **** 
 386:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:STM32F4xx_LIB/core/core_cmInstr.h **** 
 388:STM32F4xx_LIB/core/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:STM32F4xx_LIB/core/core_cmInstr.h **** 
 390:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]  value  Value to store
 391:STM32F4xx_LIB/core/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 30


 392:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 393:STM32F4xx_LIB/core/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:STM32F4xx_LIB/core/core_cmInstr.h **** 
 395:STM32F4xx_LIB/core/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:STM32F4xx_LIB/core/core_cmInstr.h **** 
 397:STM32F4xx_LIB/core/core_cmInstr.h **** 
 398:STM32F4xx_LIB/core/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:STM32F4xx_LIB/core/core_cmInstr.h **** /* GNU gcc specific functions */
 400:STM32F4xx_LIB/core/core_cmInstr.h **** 
 401:STM32F4xx_LIB/core/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:STM32F4xx_LIB/core/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:STM32F4xx_LIB/core/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:STM32F4xx_LIB/core/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:STM32F4xx_LIB/core/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:STM32F4xx_LIB/core/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:STM32F4xx_LIB/core/core_cmInstr.h **** #else
 408:STM32F4xx_LIB/core/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:STM32F4xx_LIB/core/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:STM32F4xx_LIB/core/core_cmInstr.h **** #endif
 411:STM32F4xx_LIB/core/core_cmInstr.h **** 
 412:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  No Operation
 413:STM32F4xx_LIB/core/core_cmInstr.h **** 
 414:STM32F4xx_LIB/core/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 416:STM32F4xx_LIB/core/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:STM32F4xx_LIB/core/core_cmInstr.h **** {
 418:STM32F4xx_LIB/core/core_cmInstr.h ****   __ASM volatile ("nop");
 419:STM32F4xx_LIB/core/core_cmInstr.h **** }
 420:STM32F4xx_LIB/core/core_cmInstr.h **** 
 421:STM32F4xx_LIB/core/core_cmInstr.h **** 
 422:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:STM32F4xx_LIB/core/core_cmInstr.h **** 
 424:STM32F4xx_LIB/core/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:STM32F4xx_LIB/core/core_cmInstr.h ****     until one of a number of events occurs.
 426:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 427:STM32F4xx_LIB/core/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:STM32F4xx_LIB/core/core_cmInstr.h **** {
 429:STM32F4xx_LIB/core/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:STM32F4xx_LIB/core/core_cmInstr.h **** }
 431:STM32F4xx_LIB/core/core_cmInstr.h **** 
 432:STM32F4xx_LIB/core/core_cmInstr.h **** 
 433:STM32F4xx_LIB/core/core_cmInstr.h **** /** \brief  Wait For Event
 434:STM32F4xx_LIB/core/core_cmInstr.h **** 
 435:STM32F4xx_LIB/core/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:STM32F4xx_LIB/core/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:STM32F4xx_LIB/core/core_cmInstr.h ****  */
 438:STM32F4xx_LIB/core/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 447              		.loc 2 438 53 view .LVU91
 448              	.LBB13:
 439:STM32F4xx_LIB/core/core_cmInstr.h **** {
 440:STM32F4xx_LIB/core/core_cmInstr.h ****   __ASM volatile ("wfe");
 449              		.loc 2 440 3 view .LVU92
 450              		.syntax unified
 451              	@ 440 "STM32F4xx_LIB/core/core_cmInstr.h" 1
 452 001e 20BF     		wfe
 453              	@ 0 "" 2
 454              		.thumb
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 31


 455              		.syntax unified
 456              	.L37:
 457              	.LBE13:
 458              	.LBE12:
 840:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
 841:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 842:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 459              		.loc 1 842 3 view .LVU93
 460              		.loc 1 842 12 is_stmt 0 view .LVU94
 461 0020 044A     		ldr	r2, .L39+4
 462 0022 1369     		ldr	r3, [r2, #16]
 463 0024 23F00403 		bic	r3, r3, #4
 464 0028 1361     		str	r3, [r2, #16]
 843:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** }
 465              		.loc 1 843 1 view .LVU95
 466 002a 7047     		bx	lr
 467              	.L38:
 834:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
 468              		.loc 1 834 5 is_stmt 1 view .LVU96
 469              	.LBB14:
 470              	.LBI14:
 427:STM32F4xx_LIB/core/core_cmInstr.h **** {
 471              		.loc 2 427 53 view .LVU97
 472              	.LBB15:
 429:STM32F4xx_LIB/core/core_cmInstr.h **** }
 473              		.loc 2 429 3 view .LVU98
 474              		.syntax unified
 475              	@ 429 "STM32F4xx_LIB/core/core_cmInstr.h" 1
 476 002c 30BF     		wfi
 477              	@ 0 "" 2
 430:STM32F4xx_LIB/core/core_cmInstr.h **** 
 478              		.loc 2 430 1 is_stmt 0 view .LVU99
 479              		.thumb
 480              		.syntax unified
 481 002e F7E7     		b	.L37
 482              	.L40:
 483              		.align	2
 484              	.L39:
 485 0030 00700040 		.word	1073770496
 486 0034 00ED00E0 		.word	-536810240
 487              	.LBE15:
 488              	.LBE14:
 489              		.cfi_endproc
 490              	.LFE134:
 492              		.section	.text.PWR_EnterUnderDriveSTOPMode,"ax",%progbits
 493              		.align	1
 494              		.global	PWR_EnterUnderDriveSTOPMode
 495              		.syntax unified
 496              		.thumb
 497              		.thumb_func
 498              		.fpu fpv4-sp-d16
 500              	PWR_EnterUnderDriveSTOPMode:
 501              	.LVL25:
 502              	.LFB135:
 844:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 845:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 846:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief  Enters in Under-Drive STOP mode.
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 32


 847:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *  
 848:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note   This mode is only available for STM32F42xxx/STM3243xxx devices. 
 849:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * 
 850:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note    This mode can be selected only when the Under-Drive is already active 
 851:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         
 852:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 853:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
 854:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 855:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note   When the voltage regulator operates in low power mode, an additional 
 856:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 857:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 858:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *         is higher although the startup time is reduced.
 859:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *     
 860:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 861:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 862:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_MainRegulator_UnderDrive_ON:  Main Regulator in under-drive mode 
 863:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *                 and Flash memory in power-down when the device is in Stop under-drive mode
 864:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_LowPowerRegulator_UnderDrive_ON:  Low Power Regulator in under-drive mode 
 865:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *                and Flash memory in power-down when the device is in Stop under-drive mode
 866:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 867:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 868:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 869:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 870:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @retval None
 871:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 872:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** void PWR_EnterUnderDriveSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 873:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** {
 503              		.loc 1 873 1 is_stmt 1 view -0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              		@ link register save eliminated.
 874:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 508              		.loc 1 874 3 view .LVU101
 875:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 876:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 877:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR_UNDERDRIVE(PWR_Regulator));
 509              		.loc 1 877 3 view .LVU102
 878:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 510              		.loc 1 878 3 view .LVU103
 879:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 880:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 881:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 511              		.loc 1 881 3 view .LVU104
 512              		.loc 1 881 10 is_stmt 0 view .LVU105
 513 0000 0B4A     		ldr	r2, .L45
 514 0002 1368     		ldr	r3, [r2]
 515              	.LVL26:
 882:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Clear PDDS and LPDS bits */
 883:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   tmpreg &= CR_DS_MASK;
 516              		.loc 1 883 3 is_stmt 1 view .LVU106
 517              		.loc 1 883 10 is_stmt 0 view .LVU107
 518 0004 23F44063 		bic	r3, r3, #3072
 519              	.LVL27:
 520              		.loc 1 883 10 view .LVU108
 521 0008 23F00303 		bic	r3, r3, #3
 522              	.LVL28:
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 33


 884:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 885:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Set LPDS, MRLUDS and LPLUDS bits according to PWR_Regulator value */
 886:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_Regulator;
 523              		.loc 1 886 3 is_stmt 1 view .LVU109
 524              		.loc 1 886 10 is_stmt 0 view .LVU110
 525 000c 0343     		orrs	r3, r3, r0
 526              	.LVL29:
 887:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 888:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Store the new value */
 889:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 527              		.loc 1 889 3 is_stmt 1 view .LVU111
 528              		.loc 1 889 11 is_stmt 0 view .LVU112
 529 000e 1360     		str	r3, [r2]
 890:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 891:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 892:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 530              		.loc 1 892 3 is_stmt 1 view .LVU113
 531              		.loc 1 892 12 is_stmt 0 view .LVU114
 532 0010 084A     		ldr	r2, .L45+4
 533 0012 1369     		ldr	r3, [r2, #16]
 534              	.LVL30:
 535              		.loc 1 892 12 view .LVU115
 536 0014 43F00403 		orr	r3, r3, #4
 537 0018 1361     		str	r3, [r2, #16]
 538              	.LVL31:
 893:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 894:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 895:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 539              		.loc 1 895 3 is_stmt 1 view .LVU116
 540              		.loc 1 895 5 is_stmt 0 view .LVU117
 541 001a 0129     		cmp	r1, #1
 542 001c 06D0     		beq	.L44
 896:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   {   
 897:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     /* Request Wait For Interrupt */
 898:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     __WFI();
 899:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
 900:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   else
 901:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   {
 902:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     /* Request Wait For Event */
 903:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     __WFE();
 543              		.loc 1 903 5 is_stmt 1 view .LVU118
 544              	.LBB16:
 545              	.LBI16:
 438:STM32F4xx_LIB/core/core_cmInstr.h **** {
 546              		.loc 2 438 53 view .LVU119
 547              	.LBB17:
 548              		.loc 2 440 3 view .LVU120
 549              		.syntax unified
 550              	@ 440 "STM32F4xx_LIB/core/core_cmInstr.h" 1
 551 001e 20BF     		wfe
 552              	@ 0 "" 2
 553              		.thumb
 554              		.syntax unified
 555              	.L43:
 556              	.LBE17:
 557              	.LBE16:
 904:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 34


 905:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 906:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 558              		.loc 1 906 3 view .LVU121
 559              		.loc 1 906 12 is_stmt 0 view .LVU122
 560 0020 044A     		ldr	r2, .L45+4
 561 0022 1369     		ldr	r3, [r2, #16]
 562 0024 23F00403 		bic	r3, r3, #4
 563 0028 1361     		str	r3, [r2, #16]
 907:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** }
 564              		.loc 1 907 1 view .LVU123
 565 002a 7047     		bx	lr
 566              	.L44:
 898:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
 567              		.loc 1 898 5 is_stmt 1 view .LVU124
 568              	.LBB18:
 569              	.LBI18:
 427:STM32F4xx_LIB/core/core_cmInstr.h **** {
 570              		.loc 2 427 53 view .LVU125
 571              	.LBB19:
 429:STM32F4xx_LIB/core/core_cmInstr.h **** }
 572              		.loc 2 429 3 view .LVU126
 573              		.syntax unified
 574              	@ 429 "STM32F4xx_LIB/core/core_cmInstr.h" 1
 575 002c 30BF     		wfi
 576              	@ 0 "" 2
 430:STM32F4xx_LIB/core/core_cmInstr.h **** 
 577              		.loc 2 430 1 is_stmt 0 view .LVU127
 578              		.thumb
 579              		.syntax unified
 580 002e F7E7     		b	.L43
 581              	.L46:
 582              		.align	2
 583              	.L45:
 584 0030 00700040 		.word	1073770496
 585 0034 00ED00E0 		.word	-536810240
 586              	.LBE19:
 587              	.LBE18:
 588              		.cfi_endproc
 589              	.LFE135:
 591              		.section	.text.PWR_EnterSTANDBYMode,"ax",%progbits
 592              		.align	1
 593              		.global	PWR_EnterSTANDBYMode
 594              		.syntax unified
 595              		.thumb
 596              		.thumb_func
 597              		.fpu fpv4-sp-d16
 599              	PWR_EnterSTANDBYMode:
 600              	.LFB136:
 908:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 909:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 910:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief  Enters STANDBY mode.
 911:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note   In Standby mode, all I/O pins are high impedance except for:
 912:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          - Reset pad (still available) 
 913:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          - RTC_AF1 pin (PC13) if configured for tamper, time-stamp, RTC 
 914:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            Alarm out, or RTC clock calibration out.
 915:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
 916:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          - WKUP pin 1 (PA0) if enabled.
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 35


 917:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @note   The Wakeup flag (WUF) need to be cleared at application level before to call this funct
 918:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  None
 919:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @retval None
 920:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 921:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** void PWR_EnterSTANDBYMode(void)
 922:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** {
 601              		.loc 1 922 1 is_stmt 1 view -0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 0
 604              		@ frame_needed = 0, uses_anonymous_args = 0
 605              		@ link register save eliminated.
 923:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Select STANDBY mode */
 924:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 606              		.loc 1 924 3 view .LVU129
 607              		.loc 1 924 11 is_stmt 0 view .LVU130
 608 0000 054A     		ldr	r2, .L48
 609 0002 1368     		ldr	r3, [r2]
 610 0004 43F00203 		orr	r3, r3, #2
 611 0008 1360     		str	r3, [r2]
 925:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 926:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 927:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 612              		.loc 1 927 3 is_stmt 1 view .LVU131
 613              		.loc 1 927 12 is_stmt 0 view .LVU132
 614 000a 044A     		ldr	r2, .L48+4
 615 000c 1369     		ldr	r3, [r2, #16]
 616 000e 43F00403 		orr	r3, r3, #4
 617 0012 1361     		str	r3, [r2, #16]
 928:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 929:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* This option is used to ensure that store operations are completed */
 930:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #if defined ( __CC_ARM   )
 931:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   __force_stores();
 932:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #endif
 933:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Request Wait For Interrupt */
 934:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   __WFI();
 618              		.loc 1 934 3 is_stmt 1 view .LVU133
 619              	.LBB20:
 620              	.LBI20:
 427:STM32F4xx_LIB/core/core_cmInstr.h **** {
 621              		.loc 2 427 53 view .LVU134
 622              	.LBB21:
 429:STM32F4xx_LIB/core/core_cmInstr.h **** }
 623              		.loc 2 429 3 view .LVU135
 624              		.syntax unified
 625              	@ 429 "STM32F4xx_LIB/core/core_cmInstr.h" 1
 626 0014 30BF     		wfi
 627              	@ 0 "" 2
 628              		.thumb
 629              		.syntax unified
 630              	.LBE21:
 631              	.LBE20:
 935:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** }
 632              		.loc 1 935 1 is_stmt 0 view .LVU136
 633 0016 7047     		bx	lr
 634              	.L49:
 635              		.align	2
 636              	.L48:
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 36


 637 0018 00700040 		.word	1073770496
 638 001c 00ED00E0 		.word	-536810240
 639              		.cfi_endproc
 640              	.LFE136:
 642              		.section	.text.PWR_GetFlagStatus,"ax",%progbits
 643              		.align	1
 644              		.global	PWR_GetFlagStatus
 645              		.syntax unified
 646              		.thumb
 647              		.thumb_func
 648              		.fpu fpv4-sp-d16
 650              	PWR_GetFlagStatus:
 651              	.LVL32:
 652              	.LFB137:
 936:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 937:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 938:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @}
 939:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 940:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 941:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group7 Flags management functions
 942:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *  @brief   Flags management functions 
 943:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *
 944:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** @verbatim   
 945:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****  ===============================================================================
 946:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****                     ##### Flags management functions #####
 947:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****  ===============================================================================  
 948:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 949:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** @endverbatim
 950:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @{
 951:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 952:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
 953:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
 954:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief  Checks whether the specified PWR flag is set or not.
 955:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to check.
 956:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 957:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag. This flag indicates that a wakeup event 
 958:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *                  was received from the WKUP pin or from the RTC alarm (Alarm A 
 959:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *                  or Alarm B), RTC Tamper event, RTC TimeStamp event or RTC Wakeup.
 960:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *                  An additional wakeup event is detected if the WKUP pin is enabled 
 961:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *                  (by setting the EWUP bit) when the WKUP pin level is already high.  
 962:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag. This flag indicates that the system was
 963:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *                  resumed from StandBy mode.    
 964:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_PVDO: PVD Output. This flag is valid only if PVD is enabled 
 965:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *                  by the PWR_PVDCmd() function. The PVD is stopped by Standby mode 
 966:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *                  For this reason, this bit is equal to 0 after Standby or reset
 967:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *                  until the PVDE bit is set.
 968:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_BRR: Backup regulator ready flag. This bit is not reset 
 969:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *                  when the device wakes up from Standby mode or by a system reset 
 970:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *                  or power reset.  
 971:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_VOSRDY: This flag indicates that the Regulator voltage 
 972:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *                 scaling output selection is ready.
 973:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_ODRDY: This flag indicates that the Over-drive mode
 974:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *                 is ready (STM32F42xxx/43xxx devices) 
 975:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_ODSWRDY: This flag indicates that the Over-drive mode
 976:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *                 switching is ready (STM32F42xxx/43xxx devices) 
 977:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_UDRDY: This flag indicates that the Under-drive mode
 978:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *                 is enabled in Stop mode (STM32F42xxx/43xxx devices)
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 37


 979:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @retval The new state of PWR_FLAG (SET or RESET).
 980:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
 981:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
 982:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** {
 653              		.loc 1 982 1 is_stmt 1 view -0
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 0
 656              		@ frame_needed = 0, uses_anonymous_args = 0
 657              		@ link register save eliminated.
 983:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   FlagStatus bitstatus = RESET;
 658              		.loc 1 983 3 view .LVU138
 984:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 985:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 986:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
 659              		.loc 1 986 3 view .LVU139
 987:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
 988:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 660              		.loc 1 988 3 view .LVU140
 661              		.loc 1 988 11 is_stmt 0 view .LVU141
 662 0000 034B     		ldr	r3, .L53
 663 0002 5B68     		ldr	r3, [r3, #4]
 664              		.loc 1 988 6 view .LVU142
 665 0004 0342     		tst	r3, r0
 666 0006 01D0     		beq	.L52
 989:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   {
 990:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     bitstatus = SET;
 667              		.loc 1 990 15 view .LVU143
 668 0008 0120     		movs	r0, #1
 669              	.LVL33:
 670              		.loc 1 990 15 view .LVU144
 671 000a 7047     		bx	lr
 672              	.LVL34:
 673              	.L52:
 991:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
 992:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   else
 993:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   {
 994:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     bitstatus = RESET;
 674              		.loc 1 994 15 view .LVU145
 675 000c 0020     		movs	r0, #0
 676              	.LVL35:
 995:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
 996:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Return the flag status */
 997:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   return bitstatus;
 677              		.loc 1 997 3 is_stmt 1 view .LVU146
 998:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** }
 678              		.loc 1 998 1 is_stmt 0 view .LVU147
 679 000e 7047     		bx	lr
 680              	.L54:
 681              		.align	2
 682              	.L53:
 683 0010 00700040 		.word	1073770496
 684              		.cfi_endproc
 685              	.LFE137:
 687              		.section	.text.PWR_ClearFlag,"ax",%progbits
 688              		.align	1
 689              		.global	PWR_ClearFlag
 690              		.syntax unified
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 38


 691              		.thumb
 692              		.thumb_func
 693              		.fpu fpv4-sp-d16
 695              	PWR_ClearFlag:
 696              	.LVL36:
 697              	.LFB138:
 999:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
1000:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** /**
1001:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @brief  Clears the PWR's pending flags.
1002:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to clear.
1003:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
1004:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag
1005:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag
1006:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_UDRDY: Under-drive ready flag (STM32F42xxx/43xxx devices)
1007:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   * @retval None
1008:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   */
1009:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** void PWR_ClearFlag(uint32_t PWR_FLAG)
1010:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** {
 698              		.loc 1 1010 1 is_stmt 1 view -0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 0
 701              		@ frame_needed = 0, uses_anonymous_args = 0
 702              		@ link register save eliminated.
1011:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   /* Check the parameters */
1012:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
 703              		.loc 1 1012 3 view .LVU149
1013:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   
1014:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #if defined (STM32F427_437xx) || defined (STM32F429_439xx)
1015:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   if (PWR_FLAG != PWR_FLAG_UDRDY)
1016:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   {
1017:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     PWR->CR |=  PWR_FLAG << 2;
1018:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
1019:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   else
1020:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   {
1021:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****     PWR->CSR |= PWR_FLAG_UDRDY;
1022:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   }
1023:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #endif /* STM32F427_437xx ||  STM32F429_439xx */
1024:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** 
1025:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #if defined (STM32F40_41xxx) || defined (STM32F401xx) || defined (STM32F410xx) || defined (STM32F41
1026:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c ****   PWR->CR |=  PWR_FLAG << 2;
 704              		.loc 1 1026 3 view .LVU150
 705              		.loc 1 1026 11 is_stmt 0 view .LVU151
 706 0000 024A     		ldr	r2, .L56
 707 0002 1368     		ldr	r3, [r2]
 708 0004 43EA8003 		orr	r3, r3, r0, lsl #2
 709 0008 1360     		str	r3, [r2]
1027:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** #endif /* STM32F40_41xxx  || STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F413_
1028:STM32F4xx_LIB/periph/src/stm32f4xx_pwr.c **** }
 710              		.loc 1 1028 1 view .LVU152
 711 000a 7047     		bx	lr
 712              	.L57:
 713              		.align	2
 714              	.L56:
 715 000c 00700040 		.word	1073770496
 716              		.cfi_endproc
 717              	.LFE138:
 719              		.text
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 39


 720              	.Letext0:
 721              		.file 3 "d:\\gcc_tool\\gnu_tool_arm_embedded\\arm-none-eabi\\include\\machine\\_default_types.h"
 722              		.file 4 "d:\\gcc_tool\\gnu_tool_arm_embedded\\arm-none-eabi\\include\\sys\\_stdint.h"
 723              		.file 5 "STM32F4xx_LIB/core/core_cm4.h"
 724              		.file 6 "User/system_stm32f4xx.h"
 725              		.file 7 "User/stm32f4xx.h"
 726              		.file 8 "STM32F4xx_LIB/periph/inc/stm32f4xx_rcc.h"
ARM GAS  C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s 			page 40


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_pwr.c
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:18     .text.PWR_DeInit:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:26     .text.PWR_DeInit:00000000 PWR_DeInit
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:54     .text.PWR_BackupAccessCmd:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:61     .text.PWR_BackupAccessCmd:00000000 PWR_BackupAccessCmd
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:79     .text.PWR_BackupAccessCmd:00000008 $d
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:84     .text.PWR_PVDLevelConfig:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:91     .text.PWR_PVDLevelConfig:00000000 PWR_PVDLevelConfig
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:122    .text.PWR_PVDLevelConfig:00000010 $d
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:127    .text.PWR_PVDCmd:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:134    .text.PWR_PVDCmd:00000000 PWR_PVDCmd
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:152    .text.PWR_PVDCmd:00000008 $d
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:157    .text.PWR_WakeUpPinCmd:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:164    .text.PWR_WakeUpPinCmd:00000000 PWR_WakeUpPinCmd
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:182    .text.PWR_WakeUpPinCmd:00000008 $d
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:187    .text.PWR_BackupRegulatorCmd:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:194    .text.PWR_BackupRegulatorCmd:00000000 PWR_BackupRegulatorCmd
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:212    .text.PWR_BackupRegulatorCmd:00000008 $d
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:217    .text.PWR_MainRegulatorModeConfig:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:224    .text.PWR_MainRegulatorModeConfig:00000000 PWR_MainRegulatorModeConfig
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:255    .text.PWR_MainRegulatorModeConfig:00000010 $d
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:260    .text.PWR_OverDriveCmd:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:267    .text.PWR_OverDriveCmd:00000000 PWR_OverDriveCmd
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:285    .text.PWR_OverDriveCmd:00000008 $d
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:290    .text.PWR_OverDriveSWCmd:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:297    .text.PWR_OverDriveSWCmd:00000000 PWR_OverDriveSWCmd
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:315    .text.PWR_OverDriveSWCmd:00000008 $d
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:320    .text.PWR_UnderDriveCmd:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:327    .text.PWR_UnderDriveCmd:00000000 PWR_UnderDriveCmd
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:358    .text.PWR_UnderDriveCmd:0000001c $d
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:363    .text.PWR_FlashPowerDownCmd:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:370    .text.PWR_FlashPowerDownCmd:00000000 PWR_FlashPowerDownCmd
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:388    .text.PWR_FlashPowerDownCmd:00000008 $d
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:393    .text.PWR_EnterSTOPMode:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:400    .text.PWR_EnterSTOPMode:00000000 PWR_EnterSTOPMode
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:485    .text.PWR_EnterSTOPMode:00000030 $d
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:493    .text.PWR_EnterUnderDriveSTOPMode:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:500    .text.PWR_EnterUnderDriveSTOPMode:00000000 PWR_EnterUnderDriveSTOPMode
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:584    .text.PWR_EnterUnderDriveSTOPMode:00000030 $d
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:592    .text.PWR_EnterSTANDBYMode:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:599    .text.PWR_EnterSTANDBYMode:00000000 PWR_EnterSTANDBYMode
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:637    .text.PWR_EnterSTANDBYMode:00000018 $d
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:643    .text.PWR_GetFlagStatus:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:650    .text.PWR_GetFlagStatus:00000000 PWR_GetFlagStatus
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:683    .text.PWR_GetFlagStatus:00000010 $d
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:688    .text.PWR_ClearFlag:00000000 $t
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:695    .text.PWR_ClearFlag:00000000 PWR_ClearFlag
C:\Users\æ©€Ú\AppData\Local\Temp\ccQBFnxA.s:715    .text.PWR_ClearFlag:0000000c $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
